


    "  -------------_CMT__--------------- 
    " _CMT_`wrapped^_CMT_             



"WRAPPED_TEXT
WRAPPED_TEXT_line2"

"WRAPPED_TEXT
WRAPPED_TEXT_line2"b

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"b

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"


    "  -------------'_--------------- 
    " '`wrapped^'                     



'WRAPPED_TEXT
WRAPPED_TEXT_line2'

'WRAPPED_TEXT
WRAPPED_TEXT_line2'b

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'b

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'


    "  -------------(_--------------- 
    " (`wrapped^)                     



(WRAPPED_TEXT
WRAPPED_TEXT_line2)

(WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)


    "  -------------<_--------------- 
    " <`wrapped^>                     



<WRAPPED_TEXT
WRAPPED_TEXT_line2>

<WRAPPED_TEXT
WRAPPED_TEXT_line2>b

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>b

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>


    "  -------------[_--------------- 
    " [`wrapped^]                     



[WRAPPED_TEXT
WRAPPED_TEXT_line2]

[WRAPPED_TEXT
WRAPPED_TEXT_line2]b

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]b

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]


    "  -------------`_--------------- 
    " \``wrapped^\`                   



`WRAPPED_TEXT
WRAPPED_TEXT_line2`

`WRAPPED_TEXT
WRAPPED_TEXT_line2`b

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`b

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`


    "  -------------Author--------------- 
    " `$author^                           



    drdr.xp

    drdr.xp b

    a drdr.xp b

    a drdr.xp


    "  -------------buildifeq--------------- 
    " \``name^{{\^`cursor^\`}}\^             



    `name{{^`}}^

    `name_TYPED{{^`}}^ b

    a `name{{^`}}^ b

    a `name{{^`}}^


    "  -------------comment--------------- 
    " `$CS^ `cursor^                       



    " 
    "
    "  b
    "
    a "  b

    a " 


    "  -------------comment_--------------- 
    " `$CS^ `wrapped^                       



" WRAPPED_TEXT
WRAPPED_TEXT_line2

" WRAPPED_TEXT
WRAPPED_TEXT_line2b

a " WRAPPED_TEXT
WRAPPED_TEXT_line2b

a " WRAPPED_TEXT
WRAPPED_TEXT_line2


    "  -------------commentBlock--------------- 
    " `$CS^ `cursor^                            
    " `$CS^                                     



    " 
    "
    "
    " 
    " b
    "
    a " 
    " b
    "
    a " 
    "
    "

    "  -------------commentDoc--------------- 
    " `$CS^                                   
    " `$CS^ `cursor^                          
    " `$CS^                                   



    "
    " 
    "
    "
    "
    " 
    " b
    "
    a "
    " 
    " b
    "
    a "
    " 
    "
    "

    "  -------------commentLine--------------- 
    " `$CS^ `cursor^                           



    " 
    "
    "  b
    "
    a "  b

    a " 


    "  -------------commentLine_--------------- 
    " `$CS^ `wrapped^                           



" WRAPPED_TEXT
WRAPPED_TEXT_line2

" WRAPPED_TEXT
WRAPPED_TEXT_line2b

a " WRAPPED_TEXT
WRAPPED_TEXT_line2b

a " WRAPPED_TEXT
WRAPPED_TEXT_line2


    "  -------------container--------------- 
    " let s:f = g:XPTfuncs()                 



    let s:f = g:XPTfuncs() 

    let s:f = g:XPTfuncs()  b

    a let s:f = g:XPTfuncs()  b

    a let s:f = g:XPTfuncs() 


    "  -------------Email--------------- 
    " `$email^                           



    drdr.xp@gmail.com

    drdr.xp@gmail.com b

    a drdr.xp@gmail.com b

    a drdr.xp@gmail.com


    "  -------------fdesc---------------                                              
    " _CMT_ File Description {{{                                                      
    " _CMT_ ============================================================================= 
    " _CMT_ `cursor^                                                                  
    " _CMT_                                                  by `$author^             
    " _CMT_                                                     `$email^              
    " _CMT_ Usage :                                                                   
    " _CMT_                                                                           
    " _CMT_ ============================================================================= 
    " _CMT_ }}}                                                                       



    " File Description {{{
    " =============================================================================
    " 
    "                                                  by drdr.xp
    "                                                     drdr.xp@gmail.com
    " Usage :
    "
    " =============================================================================
    " }}}
    "
    " File Description {{{
    " =============================================================================
    " 
    "                                                  by drdr.xp
    "                                                     drdr.xp@gmail.com
    " Usage :
    "
    " =============================================================================
    " }}} b
    "
    a " File Description {{{
    " =============================================================================
    " 
    "                                                  by drdr.xp
    "                                                     drdr.xp@gmail.com
    " Usage :
    "
    " =============================================================================
    " }}} b
    "
    a " File Description {{{
    " =============================================================================
    " 
    "                                                  by drdr.xp
    "                                                     drdr.xp@gmail.com
    " Usage :
    "
    " =============================================================================
    " }}}
    "

    "  -------------File--------------- 
    " `file()^                          



    test.page

    test.page b

    a test.page b

    a test.page


    "  -------------fordic---------------  
    " for [`key^, `value^] in items(`dic^) 
    "     `cursor^                         
    " endfor                               



    for [key, value] in items(dic)
        
    endfor

    for [key_TYPED, value_TYPED] in items(dic_TYPED)
        
    endfor b

    a for [key, value] in items(dic)
        
    endfor b

    a for [key, value] in items(dic)
        
    endfor


    "  -------------foreach--------------- 
    " for `value^ in `list^                
    "     `cursor^                         
    " endfor                               



    for value in list
        
    endfor

    for value_TYPED in list_TYPED
        
    endfor b

    a for value in list
        
    endfor b

    a for value in list
        
    endfor


    "  -------------forin--------------- 
    " for `value^ in `list^              
    "     `cursor^                       
    " endfor                             



    for value in list
        
    endfor

    for value_TYPED in list_TYPED
        
    endfor b

    a for value in list
        
    endfor b

    a for value in list
        
    endfor


    "  -------------fun---------------  
    " fun! s:f.`name^(` `parameters` ^) 
    "     `cursor^                      
    " endfunction                       



    fun! s:f.name()
        
    endfunction

    fun! s:f.name_TYPED( parameters_TYPED )
        
    endfunction b

    a fun! s:f.name()
        
    endfunction b

    a fun! s:f.name()
        
    endfunction


    "  -------------if--------------- 
    " if `cond^                       
    "     `job^Echo()^                
    " ``else...`                      
    " {{^else                         
    "     `cursor^                    
    " `}}^endif                       



    if cond
        
    else
        
    endif

    if cond_TYPED
        job_TYPED
    else_TYPED
    endif b

    a if cond
        
    else
        
    endif b

    a if cond
        
    else
        
    endif


    "  -------------inc--------------- 
    " \`:`name^:\^                     



    `:name:^

    `:name_TYPED:^ b

    a `:name:^ b

    a `:name:^


    "  -------------incf--------------- 
    " XPTinclude                        
    "     \ _common/common`             
    "     `...{{^`                      
    "     \ `path^/`name^`              
    "     `...^`}}^                     



    XPTinclude 
        \ _common/common
        \ ps1/
        \ ps1/
        \ ps1/

    XPTinclude 
        \ _common/common
        _TYPED b

        a XPTinclude 
            \ _common/common
            \ ps1 /
            \ ps1 /
            \ ps1 / b

        a XPTinclude 
            \ _common/common
            \ ps1/
            \ ps1/
            \ ps1/


    "  -------------member--------------- 
    " fun! `name^(`arg*^) dict _CMT_{{{   
    "     `cursor^                        
    " endfunction _CMT_}}}                



    fun! name() dict "{{{
        
    endfunction "}}}

    fun! name_TYPED(arg_TYPED, arg_TYPED, arg_TYPED) dict "{{{
        
    endfunction "}}} b

    a fun! name() dict "{{{
        
    endfunction "}}} b

    a fun! name() dict "{{{
        
    endfunction "}}}


    "  -------------once--------------- 
    " if exists(_CMT_`g^:`i^_CMT_)      
    "     finish                        
    " endif                             
    " let `g^:`i^ = 1                   
    " `cursor^                          



    if exists("g:__TEST_PAGE__")
        finish
    endif
    let g:__TEST_PAGE__ = 1
    

    if exists("g_TYPED:i_TYPED")
        finish
    endif
    let g_TYPED:i_TYPED = 1
     b

     a if exists("g:__TEST_PAGE__")
         finish
     endif
     let g:__TEST_PAGE__ = 1
      b

      a if exists("g:__TEST_PAGE__")
          finish
      endif
      let g:__TEST_PAGE__ = 1
      


    "  -------------sid---------------                                          
    " `Echo('com')^! `name^GetSID let s:sid =  matchstr(_CMT_<SID>_CMT_, '\zs\d\+_\ze') 
    " `name^GetSID                                                              
    " delc `name^GetSID                                                         



    com! nameGetSID let s:sid =  matchstr("<SID>", '\zs\d\+_\ze')
    nameGetSID
    delc nameGetSID

    com! name_TYPEDGetSID let s:sid =  matchstr("<SID>", '\zs\d\+_\ze')
    name_TYPEDGetSID
    delc name_TYPEDGetSID b

    a com! nameGetSID let s:sid =  matchstr("<SID>", '\zs\d\+_\ze')
    nameGetSID
    delc nameGetSID b

    a com! nameGetSID let s:sid =  matchstr("<SID>", '\zs\d\+_\ze')
    nameGetSID
    delc nameGetSID


    "  -------------snip--------------- 
    " XPT `name^ _CMT_ `tips^           
    " `cursor^                          



    XPT name " tips
    

    XPT name_TYPED " tips_TYPED
     b

     a XPT name " tips
      b

      a XPT name " tips
      


    "  -------------sparg--------------- 
    " \`$SParg\^                        



    `$SParg^

    `$SParg^ b

    a `$SParg^ b

    a `$SParg^


    "  -------------spcomma--------------- 
    " \`$SPop\^                        



    `$SPop^

    `$SPop^ b

    a `$SPop^ b

    a `$SPop^


    "  -------------speq--------------- 
    " \`$SPop\^                        



    `$SPop^

    `$SPop^ b

    a `$SPop^ b

    a `$SPop^


    "  -------------spif--------------- 
    " \`$SParg\^                        



    `$SParg^

    `$SParg^ b

    a `$SParg^ b

    a `$SParg^


    "  -------------spop--------------- 
    " \`$SPop\^                        



    `$SPop^

    `$SPop^ b

    a `$SPop^ b

    a `$SPop^


    "  -------------str_--------------- 
    " string(`wrapped^)                 



string(WRAPPED_TEXT
WRAPPED_TEXT_line2)

string(WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a string(WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a string(WRAPPED_TEXT
WRAPPED_TEXT_line2)


    "  -------------tmpl--------------- 
    " XPT `name^ _CMT_ `tips^           
    " `cursor^                          



    XPT name " tips
    

    XPT name_TYPED " tips_TYPED
     b

     a XPT name " tips
      b

      a XPT name " tips
      


    "  -------------try--------------- 
    " try                              
    "                                  
    " catch /`exception^/              
    " `                                
    " `finally...{{^                   
    " finally                          
    "     `cursor^`}}^                 
    " endtry                           



    try
        
    catch /.*/
    
    finally
        
    endtry

    try
        
    catch /exception_TYPED/
    
    finally_TYPED
    endtry b

    a try
        
    catch /.*/
    
    finally
        
    endtry b

    a try
        
    catch /.*/
    
    finally
        
    endtry


    "  -------------try_--------------- 
    " try                               
    "     `wrapped^                     
    " catch /`exception^/               
    " `                                 
    " `finally...{{^                    
    " finally                           
    "     `cursor^`}}^                  
    " endtry                            



try
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
catch /.*/

finally
    
endtry

try
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
catch /exception_TYPED/

finally_TYPED
endtryb

a try
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
catch /.*/

finally
    
endtryb

a try
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
catch /.*/

finally
    
endtry


    "  -------------var--------------- 
    " XPTvar $`name^ `cursor^          



    XPTvar $NAME 

    XPTvar $NAME_TYPED  b

    a XPTvar $NAME  b

    a XPTvar $NAME 


    "  -------------varComment1--------------- 
    " XPTvar $CS    `cursor^                   



    XPTvar $CS    

    XPTvar $CS     b

    a XPTvar $CS     b

    a XPTvar $CS    


    "  -------------varComment2--------------- 
    " XPTvar $CL    `left sign^                
    " XPTvar $CM    `cursor^                   
    " XPTvar $CR    `right sign^               



    XPTvar $CL    left sign
    XPTvar $CM    
    XPTvar $CR    right sign

    XPTvar $CL    leftsign_TYPED
    XPTvar $CM    
    XPTvar $CR    rightsign_TYPED b

    a XPTvar $CL    left sign
    XPTvar $CM    
    XPTvar $CR    right sign b

    a XPTvar $CL    left sign
    XPTvar $CM    
    XPTvar $CR    right sign


    "  -------------varconf--------------- 
    " if !exists(_CMT_`access^g^:`varname^_CMT_) 
    "     let `access^:`varname^ = `val^   
    " endif                                



    if !exists("g:varname")
        let g:varname = val
    endif

    if !exists("access_TYPED:varname_TYPED")
        let access_TYPED:varname_TYPED = val_TYPED
    endif b

    a if !exists("g:varname")
        let g:varname = val
    endif b

    a if !exists("g:varname")
        let g:varname = val
    endif


    "  -------------varConst--------------- 
    " XPTvar $TRUE          1               
    " XPTvar $FALSE         0               
    " XPTvar $NULL          NULL            
    " XPTvar $UNDEFINED     NULL            



    XPTvar $TRUE          1
    XPTvar $FALSE         0
    XPTvar $NULL          NULL
    XPTvar $UNDEFINED     NULL

    XPTvar $TRUE          1
    XPTvar $FALSE         0
    XPTvar $NULL          NULL
    XPTvar $UNDEFINED     NULL b

    a XPTvar $TRUE          1
    XPTvar $FALSE         0
    XPTvar $NULL          NULL
    XPTvar $UNDEFINED     NULL b

    a XPTvar $TRUE          1
    XPTvar $FALSE         0
    XPTvar $NULL          NULL
    XPTvar $UNDEFINED     NULL


    "  -------------varFormat--------------- 
    " _CMT_ if () ** {                       
    " XPTvar $BRif     ' '         
    " _CMT_ } ** else {                      
    " XPTvar $BRel   \n          
    " _CMT_ for () ** {                      
    " XPTvar $BRloop    ' '         
    " _CMT_ while () ** {                    
    " XPTvar $BRloop  ' '         
    " _CMT_ struct name ** {                 
    " XPTvar $BRstc ' '         
    " _CMT_ int fun() ** {                   
    " XPTvar $BRfun   ' '         
    " _CMT_ class name ** {                  
    " XPTvar $BRfun    ' '         



    " if () ** {
    XPTvar $BRif     ' '
    " } ** else {
    XPTvar $BRel   \n
    " for () ** {
    XPTvar $BRloop    ' '
    " while () ** {
    XPTvar $BRloop  ' '
    " struct name ** {
    XPTvar $BRstc ' '
    " int fun() ** {
    XPTvar $BRfun   ' '
    " class name ** {
    XPTvar $BRfun    ' '

    " if () ** {
    XPTvar $BRif     ' '
    " } ** else {
    XPTvar $BRel   \n
    " for () ** {
    XPTvar $BRloop    ' '
    " while () ** {
    XPTvar $BRloop  ' '
    " struct name ** {
    XPTvar $BRstc ' '
    " int fun() ** {
    XPTvar $BRfun   ' '
    " class name ** {
    XPTvar $BRfun    ' ' b

    a " if () ** {
    XPTvar $BRif     ' '
    " } ** else {
    XPTvar $BRel   \n
    " for () ** {
    XPTvar $BRloop    ' '
    " while () ** {
    XPTvar $BRloop  ' '
    " struct name ** {
    XPTvar $BRstc ' '
    " int fun() ** {
    XPTvar $BRfun   ' '
    " class name ** {
    XPTvar $BRfun    ' ' b

    a " if () ** {
    XPTvar $BRif     ' '
    " } ** else {
    XPTvar $BRel   \n
    " for () ** {
    XPTvar $BRloop    ' '
    " while () ** {
    XPTvar $BRloop  ' '
    " struct name ** {
    XPTvar $BRstc ' '
    " int fun() ** {
    XPTvar $BRfun   ' '
    " class name ** {
    XPTvar $BRfun    ' '


    "  -------------varHelper--------------- 
    " XPTvar $VOID_LINE                      
    " XPTvar $CURSOR_PH                      



    XPTvar $VOID_LINE      
    XPTvar $CURSOR_PH      

    XPTvar $VOID_LINE      
    XPTvar $CURSOR_PH       b

    a XPTvar $VOID_LINE      
    XPTvar $CURSOR_PH       b

    a XPTvar $VOID_LINE      
    XPTvar $CURSOR_PH      


    "  -------------varLang--------------- 
    " _CMT_ variable prefix                
    " XPTvar $VAR_PRE                      



    " variable prefix
    XPTvar $VAR_PRE            

    " variable prefix
    XPTvar $VAR_PRE             b

    a " variable prefix
    XPTvar $VAR_PRE             b

    a " variable prefix
    XPTvar $VAR_PRE            


    "  -------------varSpaces--------------- 
    " _CMT_ int fun( ** arg ** )             
    " XPTvar $SParg      ' '                
    " _CMT_ if ( ** condition ** )           
    " XPTvar $SParg       ' '                
    " _CMT_ a ** = ** b                      
    " XPTvar $SPop       ' '                
    " _CMT_ a = a ** + ** 1                  
    " XPTvar $SPop       ' '                
    " _CMT_ (a, ** b, ** )                   
    " XPTvar $SPop    ' '                



    " int fun( ** arg ** )
    XPTvar $SParg      ' '
    " if ( ** condition ** )
    XPTvar $SParg       ' '
    " a ** = ** b
    XPTvar $SPop       ' '
    " a = a ** + ** 1
    XPTvar $SPop       ' '
    " (a, ** b, ** )
    XPTvar $SPop    ' '

    " int fun( ** arg ** )
    XPTvar $SParg      ' '
    " if ( ** condition ** )
    XPTvar $SParg       ' '
    " a ** = ** b
    XPTvar $SPop       ' '
    " a = a ** + ** 1
    XPTvar $SPop       ' '
    " (a, ** b, ** )
    XPTvar $SPop    ' ' b

    a " int fun( ** arg ** )
    XPTvar $SParg      ' '
    " if ( ** condition ** )
    XPTvar $SParg       ' '
    " a ** = ** b
    XPTvar $SPop       ' '
    " a = a ** + ** 1
    XPTvar $SPop       ' '
    " (a, ** b, ** )
    XPTvar $SPop    ' ' b

    a " int fun( ** arg ** )
    XPTvar $SParg      ' '
    " if ( ** condition ** )
    XPTvar $SParg       ' '
    " a ** = ** b
    XPTvar $SPop       ' '
    " a = a ** + ** 1
    XPTvar $SPop       ' '
    " (a, ** b, ** )
    XPTvar $SPop    ' '


    "  -------------vimformat---------------                     
    " _CMT_ vim:tw=78:ts=8:sw=2:sts=2:et:norl:fdm=marker:fmr={{{,}}} 



    " vim:tw=78:ts=8:sw=2:sts=2:et:norl:fdm=marker:fmr={{{,}}}
    "
    " vim:tw=78:ts=8:sw=2:sts=2:et:norl:fdm=marker:fmr={{{,}}} b
    "
    a " vim:tw=78:ts=8:sw=2:sts=2:et:norl:fdm=marker:fmr={{{,}}} b

    a " vim:tw=78:ts=8:sw=2:sts=2:et:norl:fdm=marker:fmr={{{,}}}


    "  -------------while--------------- 
    " while `cond^                       
    "     `cursor^                       
    " endwhile                           



    while cond
        
    endwhile

    while cond_TYPED
        
    endwhile b

    a while cond
        
    endwhile b

    a while cond
        
    endwhile


    "  -------------whilei---------------              
    " let [ `i^, `len^ ] = [ `0^ - 1, `len_expr^ - 1 ] 
    " while `i^ < `len^ | let `i^ += 1                 
    "     `cursor^                                     
    " endwhile                                         



    let [ i, len ] = [ 0 - 1, len_expr - 1 ]
    while i < len | let i += 1
        
    endwhile

    let [ i_TYPED, len_TYPED ] = [ 0_TYPED - 1, len_expr_TYPED - 1 ]
    while i_TYPED < len_TYPED | let i_TYPED += 1
        
    endwhile b

    a let [ i, len ] = [ 0 - 1, len_expr - 1 ]
    while i < len | let i += 1
        
    endwhile b

    a let [ i, len ] = [ 0 - 1, len_expr - 1 ]
    while i < len | let i += 1
        
    endwhile


    "  -------------xpt---------------                                                 
    " XPTemplate priority=`prio^` `mark...^                                            
    "                                                                                  
    " let s:f = g:XPTfuncs()                                                           
    "                                                                                  
    " `Include:varConst^                                                               
    "                                                                                  
    " `Include:varFormat^                                                              
    "                                                                                  
    " `XPTinclude...{{^`Include:incf^`}}^                                              
    "                                                                                  
    "                                                                                  
    " _CMT_ ========================= Function and Variables ============================= 
    "                                                                                  
    " _CMT_ ================================= Snippets =================================== 
    " XPTemplateDef                                                                    
    "                                                                                  
    "                                                                                  
    " `cursor^                                                                         
    "                                                                                  
    " _CMT_ ================================= Wrapper =================================== 



    XPTemplate priority=all mark=char
    
    let s:f = g:XPTfuncs() 
    
    XPTvar $TRUE          1
    XPTvar $FALSE         0
    XPTvar $NULL          NULL
    XPTvar $UNDEFINED     NULL
    
    " if () ** {
    XPTvar $BRif     ' '
    " } ** else {
    XPTvar $BRel   \n
    " for () ** {
    XPTvar $BRloop    ' '
    " while () ** {
    XPTvar $BRloop  ' '
    " struct name ** {
    XPTvar $BRstc ' '
    " int fun() ** {
    XPTvar $BRfun   ' '
    " class name ** {
    XPTvar $BRfun    ' '
    
    XPTinclude 
        \ _common/common
        \ ps1/
        \ ps1/
    
    
    " ========================= Function and Variables =============================
    
    " ================================= Snippets ===================================
    XPTemplateDef
    
    
    
    
    " ================================= Wrapper ===================================
    

    XPTemplate priority=all mark_TYPED
    
    let s:f = g:XPTfuncs() 
    
    XPTvar $TRUE          1
    XPTvar $FALSE         0
    XPTvar $NULL          NULL
    XPTvar $UNDEFINED     NULL
    
    " if () ** {
    XPTvar $BRif     ' '
    " } ** else {
    XPTvar $BRel   \n
    " for () ** {
    XPTvar $BRloop    ' '
    " while () ** {
    XPTvar $BRloop  ' '
    " struct name ** {
    XPTvar $BRstc ' '
    " int fun() ** {
    XPTvar $BRfun   ' '
    " class name ** {
    XPTvar $BRfun    ' '
    
    XPTinclude_TYPED
    
    
    " ========================= Function and Variables =============================
    
    " ================================= Snippets ===================================
    XPTemplateDef
    
    
    
    
    " ================================= Wrapper ===================================
     b

     a XPTemplate priority=all mark=char
     
     let s:f = g:XPTfuncs() 
     
     XPTvar $TRUE          1
     XPTvar $FALSE         0
     XPTvar $NULL          NULL
     XPTvar $UNDEFINED     NULL
     
     " if () ** {
     XPTvar $BRif     ' '
     " } ** else {
     XPTvar $BRel   \n
     " for () ** {
     XPTvar $BRloop    ' '
     " while () ** {
     XPTvar $BRloop  ' '
     " struct name ** {
     XPTvar $BRstc ' '
     " int fun() ** {
     XPTvar $BRfun   ' '
     " class name ** {
     XPTvar $BRfun    ' '
     
     XPTinclude 
         \ _common/common
         \ ps1/
         \ ps1/
     
     
     " ========================= Function and Variables =============================
     
     " ================================= Snippets ===================================
     XPTemplateDef
     
     
     
     
     " ================================= Wrapper ===================================
      b

      a XPTemplate priority=all mark=char
      
      let s:f = g:XPTfuncs() 
      
      XPTvar $TRUE          1
      XPTvar $FALSE         0
      XPTvar $NULL          NULL
      XPTvar $UNDEFINED     NULL
      
      " if () ** {
      XPTvar $BRif     ' '
      " } ** else {
      XPTvar $BRel   \n
      " for () ** {
      XPTvar $BRloop    ' '
      " while () ** {
      XPTvar $BRloop  ' '
      " struct name ** {
      XPTvar $BRstc ' '
      " int fun() ** {
      XPTvar $BRfun   ' '
      " class name ** {
      XPTvar $BRfun    ' '
      
      XPTinclude 
          \ _common/common
          \ ps1/
          \ ps1/
      
      
      " ========================= Function and Variables =============================
      
      " ================================= Snippets ===================================
      XPTemplateDef
      
      
      
      
      " ================================= Wrapper ===================================
      


    "  -------------{_--------------- 
    " {`wrapped^}                     



{WRAPPED_TEXT
WRAPPED_TEXT_line2}

{WRAPPED_TEXT
WRAPPED_TEXT_line2}b

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}b

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}

