


    (*  -------------"_--------------- *)
    (* "`wrapped^"                     *)



"WRAPPED_TEXT
WRAPPED_TEXT_line2"

"WRAPPED_TEXT
WRAPPED_TEXT_line2"b

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"b

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"


    (*  -------------'_--------------- *)
    (* '`wrapped^'                     *)



'WRAPPED_TEXT
WRAPPED_TEXT_line2'

'WRAPPED_TEXT
WRAPPED_TEXT_line2'b

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'b

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'


    (*  -------------(_--------------- *)
    (* (`wrapped^)                     *)



(WRAPPED_TEXT
WRAPPED_TEXT_line2)

(WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)


    (*  -------------<_--------------- *)
    (* <`wrapped^>                     *)



<WRAPPED_TEXT
WRAPPED_TEXT_line2>

<WRAPPED_TEXT
WRAPPED_TEXT_line2>b

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>b

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>


    (*  -------------[_--------------- *)
    (* [`wrapped^]                     *)



[WRAPPED_TEXT
WRAPPED_TEXT_line2]

[WRAPPED_TEXT
WRAPPED_TEXT_line2]b

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]b

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]


    (*  -------------`_--------------- *)
    (* \``wrapped^\`                   *)



`WRAPPED_TEXT
WRAPPED_TEXT_line2`

`WRAPPED_TEXT
WRAPPED_TEXT_line2`b

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`b

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`


    (*  -------------Author--------------- *)
    (* `$author^                           *)



drdr.xp

drdr.xp b

a drdr.xp b

a drdr.xp


    (*  -------------begin--------------- *)
    (* begin                              *)
    (*     `cursor^                       *)
    (* end                                *)



begin
    
end

begin
    
end b

a begin
    
end b

a begin
    
end


    (*  -------------class--------------- *)
    (* class `_^^ `name^ =                *)
    (* object (self)                      *)
    (*     `cursor^                       *)
    (* end                                *)



class  name =
object (self)
    
end

class __TYPED name_TYPED =
object (self)
    
end b

a class  name =
object (self)
    
end b

a class  name =
object (self)
    
end


    (*  -------------classtype--------------- *)
    (* class type `name^ =                    *)
    (* object                                 *)
    (*    method `field^ : `type^` `...^      *)
    (*    method `field^ : `type^` `...^      *)
    (* end                                    *)



class type name =
object
   method field : type
   method field : type
   method field : type
   method field : type
end

class type name_TYPED =
object
   method field_TYPED : type_TYPED _TYPED
end b

a class type name =
object
   method field : type
   method field : type
   method field : type
   method field : type
end b

a class type name =
object
   method field : type
   method field : type
   method field : type
   method field : type
end


    (*  -------------classtypecom--------------- *)
    (* _CMT_* `class_descr^^ _cmt_               *)
    (* class type `name^ =                       *)
    (* object                                    *)
    (*    _CMT_* `method_descr^^ _cmt_           *)
    (*    method `field^ : `type^` `...^         *)
    (*    _CMT_* `method_descr^^ _cmt_           *)
    (*    method `field^ : `type^` `...^         *)
    (* end                                       *)



(**  *)
class type name =
object
   (**  *)
   method field : type
   (**  *)
   method field : type
   (**  *)
   method field : type
   (**  *)
   method field : type
end

(** class_descr_TYPED *)
class type name_TYPED =
object
   (** method_descr_TYPED *)
   method field_TYPED : type_TYPED _TYPED
end b

a (**  *)
class type name =
object
   (**  *)
   method field : type
   (**  *)
   method field : type
   (**  *)
   method field : type
   (**  *)
   method field : type
end b

a (**  *)
class type name =
object
   (**  *)
   method field : type
   (**  *)
   method field : type
   (**  *)
   method field : type
   (**  *)
   method field : type
end


    (*  -------------comment--------------- *)
    (* `$CL^ `what^ `$CR^                   *)



(* what *)

(* what_TYPED *) b

a (* what *) b

a (* what *)


    (*  -------------comment_--------------- *)
    (* `$CL^ `wrapped^ `$CR^                 *)



(* WRAPPED_TEXT
WRAPPED_TEXT_line2 *)

(* WRAPPED_TEXT
WRAPPED_TEXT_line2 *)b

a (* WRAPPED_TEXT
WRAPPED_TEXT_line2 *)b

a (* WRAPPED_TEXT
WRAPPED_TEXT_line2 *)


    (*  -------------commentBlock--------------- *)
    (* `$CL^                                     *)
    (*  `$CM^ `cursor^                           *)
    (*  `$CR^                                    *)



    (*
     * 
     *)

    (*
     * 
     *) b

     a (*
      * 
      *) b

      a (*
       * 
       *)


    (*  -------------commentBlock_--------------- *)
    (* `$CL^                                      *)
    (*  `$CM^ `wrapped^                           *)
    (*  `$CR^                                     *)



(*
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 *)

(*
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 *)b

 a (*
  * WRAPPED_TEXT
  WRAPPED_TEXT_line2
  *)b

  a (*
   * WRAPPED_TEXT
   WRAPPED_TEXT_line2
   *)


    (*  -------------commentDoc--------------- *)
    (* `$CL^`$CM^                              *)
    (*  `$CM^ `cursor^                         *)
    (*  `$CR^                                  *)



    (**
     * 
     *)

    (**
     * 
     *) b

     a (**
      * 
      *) b

      a (**
       * 
       *)


    (*  -------------commentDoc_--------------- *)
    (* `$CL^`$CM^                               *)
    (*  `$CM^ `wrapped^                         *)
    (*  `$CR^                                   *)



(**
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 *)

(**
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 *)b

 a (**
  * WRAPPED_TEXT
  WRAPPED_TEXT_line2
  *)b

  a (**
   * WRAPPED_TEXT
   WRAPPED_TEXT_line2
   *)


    (*  -------------commentLine--------------- *)
    (* `$CL^ `what^ `$CR^                       *)



    (* what *)

    (* what_TYPED *) b

    a (* what *) b

    a (* what *)


    (*  -------------commentLine_--------------- *)
    (* `$CL^ `wrapped^ `$CR^                     *)



(* WRAPPED_TEXT
WRAPPED_TEXT_line2 *)

(* WRAPPED_TEXT
WRAPPED_TEXT_line2 *)b

a (* WRAPPED_TEXT
WRAPPED_TEXT_line2 *)b

a (* WRAPPED_TEXT
WRAPPED_TEXT_line2 *)


    (*  -------------do--------------- *)
    (* do {                            *)
    (*     `cursor^                    *)
    (* }                               *)



    do {
        
    }

    do {
        
    } b

    a do {
        
    } b

    a do {
        
    }


    (*  -------------Email--------------- *)
    (* `$email^                           *)



    drdr.xp@gmail.com

    drdr.xp@gmail.com b

    a drdr.xp@gmail.com b

    a drdr.xp@gmail.com


    (*  -------------File--------------- *)
    (* `file()^                          *)



    test.page

    test.page b

    a test.page b

    a test.page


    (*  -------------for---------------   *)
    (* for `var^ = `val^ `side^ `expr^ do *)
    (*     `cursor^                       *)
    (* done                               *)



    for var = val to expr do
        
    done

    for var_TYPED = val_TYPED to expr_TYPED do
        
    done b

    a for var = val to expr do
        
    done b

    a for var = val to expr do
        
    done


    (*  -------------fun--------------- *)
    (* (fun `args^ -> `^)               *)



    (fun args -> )

    (fun args_TYPED -> _TYPED) b

    a (fun args -> ) b

    a (fun args -> )


    (*  -------------func--------------- *)
    (* let `funName^ : `ty^ =            *)
    (* fun `args^ ->                     *)
    (*     `cursor^                      *)



let funName : ty =
fun args ->
    

    let funName_TYPED : ty_TYPED =
    fun args_TYPED ->
         b

         a let funName : ty =
         fun args ->
              b

              a let funName : ty =
              fun args ->
                  


    (*  -------------if--------------- *)
    (* if `cond^                       *)
    (*     then `cursor^`else...{{^    *)
    (*     else`}}^                    *)



                  if cond
                      then 
                      else

                          if cond_TYPED
                              then else_TYPED b

                              a if cond
                                  then 
                                  else b

                                  a if cond
                                      then 
                                      else


    (*  -------------letin--------------- *)
    (* let `name^ `_^^ =                  *)
    (*     `what^` `...^                  *)
    (* and `subname^ `_^^ =               *)
    (*     `subwhat^` `...^               *)
    (* in                                 *)



                                          let name  =
                                              what
                                          and subname  =
                                              subwhat
                                          and subname  =
                                              subwhat
                                          and subname  =
                                              subwhat
                                          in

                                          let name_TYPED __TYPED =
                                              what_TYPED _TYPED
                                          in b

                                          a let name  =
                                              what
                                          and subname  =
                                              subwhat
                                          and subname  =
                                              subwhat
                                          and subname  =
                                              subwhat
                                          in b

                                          a let name  =
                                              what
                                          and subname  =
                                              subwhat
                                          and subname  =
                                              subwhat
                                          and subname  =
                                              subwhat
                                          in


    (*  -------------letrecin--------------- *)
    (* let rec `name^ `_^^ =                 *)
    (*     `what^` `...^                     *)
    (* and `subname^ `_^^ =                  *)
    (*     `subwhat^` `...^                  *)
    (* in                                    *)



                                          let rec name  =
                                              what
                                          and subname  =
                                              subwhat
                                          and subname  =
                                              subwhat
                                          and subname  =
                                              subwhat
                                          in

                                          let rec name_TYPED __TYPED =
                                              what_TYPED _TYPED
                                          in b

                                          a let rec name  =
                                              what
                                          and subname  =
                                              subwhat
                                          and subname  =
                                              subwhat
                                          and subname  =
                                              subwhat
                                          in b

                                          a let rec name  =
                                              what
                                          and subname  =
                                              subwhat
                                          and subname  =
                                              subwhat
                                          and subname  =
                                              subwhat
                                          in


    (*  -------------match---------------      *)
    (* match `expr^ with                       *)
    (*     `what^ -> `with^` `...{{^           *)
    (*   | `what^ -> `with^` `more...{{^       *)
    (*   | `what^ -> `with^` `more...^`}}^`}}^ *)



                                          match expr with
                                              what -> with
                                            | what -> with
                                            | what -> with
                                            | what -> with

                                            match expr_TYPED with
                                                what_TYPED -> with_TYPED _TYPED b

                                                a match expr with
                                                    what -> with
                                                  | what -> with
                                                  | what -> with
                                                  | what -> with b

                                                  a match expr with
                                                      what -> with
                                                    | what -> with
                                                    | what -> with
                                                    | what -> with


    (*  -------------module--------------- *)
    (* module `name^ `^ = struct           *)
    (*     `cursor^                        *)
    (* end                                 *)



                                                    module Name  = struct
                                                        
                                                    end

                                                    module Name_TYPED _TYPED = struct
                                                        
                                                    end b

                                                    a module Name  = struct
                                                        
                                                    end b

                                                    a module Name  = struct
                                                        
                                                    end


    (*  -------------moduletype--------------- *)
    (* module type `name^ `^ = sig             *)
    (*     `cursor^                            *)
    (* end                                     *)



module type name  = sig
    
end

module type name_TYPED _TYPED = sig
    
end b

a module type name  = sig
    
end b

a module type name  = sig
    
end


    (*  -------------try--------------- *)
    (* try `expr^                       *)
    (* with  `exc^ -> `rez^             *)
    (* `     `...`                      *)
    (* {{^     | `exc2^ -> `rez2^       *)
    (* `     `...`                      *)
    (* ^`}}^                            *)



try expr
with  exc -> rez
     | exc2 -> rez2
     | exc2 -> rez2
     | exc2 -> rez2


     try expr_TYPED
     with  exc_TYPED -> rez_TYPED
          _TYPED
      b

      a try expr
      with  exc -> rez
           | exc2 -> rez2
           | exc2 -> rez2
           | exc2 -> rez2
       b

       a try expr
       with  exc -> rez
            | exc2 -> rez2
            | exc2 -> rez2
            | exc2 -> rez2
       


    (*  -------------try_--------------- *)
    (* try                               *)
    (*     `wrapped^                     *)
    (* with  `exc^ -> `rez^              *)
    (* `     `...`                       *)
    (* {{^     | `exc2^ -> `rez2^        *)
    (* `     `...`                       *)
    (* ^`}}^                             *)



try
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
with  exc -> rez
     | exc2 -> rez2
     | exc2 -> rez2
     | exc2 -> rez2


     try
         WRAPPED_TEXT
         WRAPPED_TEXT_line2
     with  exc_TYPED -> rez_TYPED
          _TYPED
     b

     a try
         WRAPPED_TEXT
         WRAPPED_TEXT_line2
     with  exc -> rez
          | exc2 -> rez2
          | exc2 -> rez2
          | exc2 -> rez2
     b

     a try
         WRAPPED_TEXT
         WRAPPED_TEXT_line2
     with  exc -> rez
          | exc2 -> rez2
          | exc2 -> rez2
          | exc2 -> rez2
     


    (*  -------------ty--------------- *)
    (* `t^`...^ -> `t2^`...^           *)



          t -> t2 -> t2 -> t2

          t_TYPED_TYPED b

          a t -> t2 -> t2 -> t2 b

          a t -> t2 -> t2 -> t2


    (*  -------------typerecord--------------- *)
    (* type `typename^` `typeParams?^ =        *)
    (*     { `recordField^ : `fType^` `...^    *)
    (*     ; `recordField^ : `fType^` `...^    *)
    (*     }                                   *)



                                          type typename =
                                              { recordField : fType
                                              ; recordField : fType
                                              ; recordField : fType
                                              }

                                              type typename_TYPED typeParams_TYPED =
                                                  { recordField_TYPED : fType_TYPED _TYPED
                                                  } b

                                                  a type typename =
                                                      { recordField : fType
                                                      ; recordField : fType
                                                      ; recordField : fType
                                                      } b

                                                      a type typename =
                                                          { recordField : fType
                                                          ; recordField : fType
                                                          ; recordField : fType
                                                          }


    (*  -------------typerecordcom---------------            *)
    (* _CMT_* `type_descr^ _cmt_                             *)
    (* type `typename^ `_^^=                                 *)
    (*     { `recordField^ : `fType^ _CMT_* `desc^ _cmt_` `...^ *)
    (*     ; `otherfield^ : `othertype^ _CMT_* `desc^ _cmt_` `...^ *)
    (*     }                                                 *)



                                              (** type_descr *)
                                              type typename =
                                                  { recordField : fType (** desc *)
                                                  ; otherfield : othertype (** desc *)
                                                  ; otherfield : othertype (** desc *)
                                                  ; otherfield : othertype (** desc *)
                                                  }

                                                  (** type_descr_TYPED *)
                                                  type typename_TYPED __TYPED=
                                                      { recordField_TYPED : fType_TYPED (** desc_TYPED *) _TYPED
                                                      } b

                                                      a (** type_descr *)
                                                      type typename =
                                                          { recordField : fType (** desc *)
                                                          ; otherfield : othertype (** desc *)
                                                          ; otherfield : othertype (** desc *)
                                                          ; otherfield : othertype (** desc *)
                                                          } b

                                                          a (** type_descr *)
                                                          type typename =
                                                              { recordField : fType (** desc *)
                                                              ; otherfield : othertype (** desc *)
                                                              ; otherfield : othertype (** desc *)
                                                              ; otherfield : othertype (** desc *)
                                                              }


    (*  -------------typesum--------------- *)
    (* type `typename^` `typeParams?^ =     *)
    (*     `constructor^` `...{{^           *)
    (*   | `constructor^` `more...{{^       *)
    (*   | `constructor^` `more...^`}}^`}}^ *)



                                                          type typename =
                                                              constructor
                                                            | constructor
                                                            | constructor
                                                            | constructor

                                                            type typename_TYPED typeParams_TYPED =
                                                                constructor_TYPED _TYPED b

                                                                a type typename =
                                                                    constructor
                                                                  | constructor
                                                                  | constructor
                                                                  | constructor b

                                                                  a type typename =
                                                                      constructor
                                                                    | constructor
                                                                    | constructor
                                                                    | constructor


    (*  -------------typesumcom---------------                 *)
    (* _CMT_* `typeDescr^ _cmt_                                *)
    (* type `typename^` `typeParams?^ =                        *)
    (*     `constructor^ _CMT_* `ctordescr^ _cmt_` `...{{^     *)
    (*   | `constructor^ _CMT_* `ctordescr^ _cmt_` `more...{{^ *)
    (*   | `constructor^ _CMT_* `ctordescr^ _cmt_` `more...^`}}^`}}^ *)



                                                            (** typeDescr *)
                                                            type typename =
                                                                constructor (** ctordescr *)
                                                              | constructor (** ctordescr *)
                                                              | constructor (** ctordescr *)
                                                              | constructor (** ctordescr *)

                                                              (** typeDescr_TYPED *)
                                                              type typename_TYPED typeParams_TYPED =
                                                                  constructor_TYPED (** ctordescr_TYPED *) _TYPED b

                                                                  a (** typeDescr *)
                                                                  type typename =
                                                                      constructor (** ctordescr *)
                                                                    | constructor (** ctordescr *)
                                                                    | constructor (** ctordescr *)
                                                                    | constructor (** ctordescr *) b

                                                                    a (** typeDescr *)
                                                                    type typename =
                                                                        constructor (** ctordescr *)
                                                                      | constructor (** ctordescr *)
                                                                      | constructor (** ctordescr *)
                                                                      | constructor (** ctordescr *)


    (*  -------------val--------------- *)
    (* value `thing^ : `cursor^         *)



                                                                      value thing : 

                                                                          value thing_TYPED :  b

                                                                          a value thing :  b

                                                                          a value thing : 


    (*  -------------while--------------- *)
    (* while `cond^ do                    *)
    (*     `cursor^                       *)
    (* done                               *)



                                                                              while cond do
                                                                                  
                                                                              done

                                                                              while cond_TYPED do
                                                                                  
                                                                              done b

                                                                              a
                                                                             while cond do
                                                                                 
                                                                             done b

                                                                             a
                                                                             while cond do
                                                                                 
                                                                             done


    (*  -------------{_--------------- *)
    (* {`wrapped^}                     *)



{WRAPPED_TEXT
WRAPPED_TEXT_line2}

{WRAPPED_TEXT
WRAPPED_TEXT_line2}b

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}b

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}

