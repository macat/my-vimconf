


    #  -------------"_--------------- 
    # "`wrapped^"                     



"WRAPPED_TEXT
WRAPPED_TEXT_line2"

"WRAPPED_TEXT
WRAPPED_TEXT_line2"b

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"b

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"


    #  -------------'_--------------- 
    # '`wrapped^'                     



'WRAPPED_TEXT
WRAPPED_TEXT_line2'

'WRAPPED_TEXT
WRAPPED_TEXT_line2'b

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'b

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'


    #  -------------(_--------------- 
    # (`wrapped^)                     



(WRAPPED_TEXT
WRAPPED_TEXT_line2)

(WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)


    #  -------------<_--------------- 
    # <`wrapped^>                     



<WRAPPED_TEXT
WRAPPED_TEXT_line2>

<WRAPPED_TEXT
WRAPPED_TEXT_line2>b

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>b

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>


    #  -------------[_--------------- 
    # [`wrapped^]                     



[WRAPPED_TEXT
WRAPPED_TEXT_line2]

[WRAPPED_TEXT
WRAPPED_TEXT_line2]b

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]b

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]


    #  -------------`_--------------- 
    # \``wrapped^\`                   



`WRAPPED_TEXT
WRAPPED_TEXT_line2`

`WRAPPED_TEXT
WRAPPED_TEXT_line2`b

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`b

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`


    #  -------------Author--------------- 
    # `$author^                           



drdr.xp

drdr.xp b

a drdr.xp b

a drdr.xp


    #  -------------class---------------                  
    # class `ClassName^`$SPfun^(`$SParg`parent?`$SParg^): 
    #     `__init__...{{^`:init:^`}}^                     



class ClassName():
    def __init__( self ):
        

        class ClassName_TYPED( parent_TYPED ):
            __init___TYPED b

a class ClassName():
    def __init__( self ):
         b

a class ClassName():
    def __init__( self ):
        


    #  -------------comment--------------- 
    # `$CS^ `cursor^                       



# 
#
#  b
#
a #  b

a # 


    #  -------------comment_--------------- 
    # `$CS^ `wrapped^                       



# WRAPPED_TEXT
WRAPPED_TEXT_line2

# WRAPPED_TEXT
WRAPPED_TEXT_line2b

a # WRAPPED_TEXT
WRAPPED_TEXT_line2b

a # WRAPPED_TEXT
WRAPPED_TEXT_line2


    #  -------------commentBlock--------------- 
    # `$CS^ `cursor^                            
    # `$CS^                                     



# 
#
#
# 
# b
#
a # 
# b
#
a # 
#
#

    #  -------------commentDoc--------------- 
    # `$CS^                                   
    # `$CS^ `cursor^                          
    # `$CS^                                   



#
# 
#
#
#
# 
# b
#
a #
# 
# b
#
a #
# 
#
#

    #  -------------commentLine--------------- 
    # `$CS^ `cursor^                           



# 
#
#  b
#
a #  b

a # 


    #  -------------commentLine_--------------- 
    # `$CS^ `wrapped^                           



# WRAPPED_TEXT
WRAPPED_TEXT_line2

# WRAPPED_TEXT
WRAPPED_TEXT_line2b

a # WRAPPED_TEXT
WRAPPED_TEXT_line2b

a # WRAPPED_TEXT
WRAPPED_TEXT_line2


    #  -------------def---------------                                                      
    # def `name^`$SPfun^(`a^python_sp_arg()^``a^`a^AutoCmpl(0,'self')^`a^python_sp_arg()^): 
    #     `cursor^                                                                          



def name():
    

    def name_TYPED( a_TYPED, arg_TYPED, arg_TYPED, arg_TYPED ):
         b

a def name():
     b

a def name():
    


    #  -------------elif--------------- 
    # elif `cond^:                      
    #     `cursor^                      



elif cond:
    

    elif cond_TYPED:
         b

a elif cond:
     b

a elif cond:
    


    #  -------------else--------------- 
    # else:                             
    #     `cursor^                      



else:
    

    else:
         b

a else:
     b

a else:
    


    #  -------------Email--------------- 
    # `$email^                           



drdr.xp@gmail.com

drdr.xp@gmail.com b

a drdr.xp@gmail.com b

a drdr.xp@gmail.com


    #  -------------except---------------    
    # except `Exception^`$PYTHON_EXP_SYM`e^: 
    #     `pass^                             



except Exception, e:
    pass

except Exception_TYPED, e_TYPED:
    pass b

a except Exception, e:
    pass b

a except Exception, e:
    pass


    #  -------------File--------------- 
    # `file()^                          



test.page

test.page b

a test.page b

a test.page


    #  -------------filehead--------------- 
    # `$PYTHON_DOC_MARK^                    
    # File    : `file()^                    
    # Author  : `$author^                   
    # Contact : `$email^                    
    # Date    : `date()^                    
    #                                       
    # Description : `cursor^                
    # `$PYTHON_DOC_MARK^                    



'''
File    : test.page
Author  : drdr.xp
Contact : drdr.xp@gmail.com
Date    : 2009 Oct 08

Description : 
'''

'''
File    : test.page
Author  : drdr.xp
Contact : drdr.xp@gmail.com
Date    : 2009 Oct 08

Description : 
''' b

a '''
File    : test.page
Author  : drdr.xp
Contact : drdr.xp@gmail.com
Date    : 2009 Oct 08

Description : 
''' b

a '''
File    : test.page
Author  : drdr.xp
Contact : drdr.xp@gmail.com
Date    : 2009 Oct 08

Description : 
'''


    #  -------------finally--------------- 
    # finally:                             
    #     pass`^                           



finally:
    pass

finally:
    pass b

a finally:
    pass b

a finally:
    pass


    #  -------------for---------------           
    # for `var^ in `seq^`seq^python_seq_cmpl()^: 
    #     `cursor^                               



for var in seq:
    

    for var_TYPED in seq_TYPED:
         b

a for var in seq:
     b

a for var in seq:
    


    #  -------------forrange--------------- 
    # for `i^ in `:range:^:                 
    #     `cursor^                          



for i in range( end ):
    

    for i_TYPED in range( 0_TYPED, end_TYPED ):
         b

a for i in range( end ):
     b

a for i in range( end ):
    


    #  -------------from---------------       
    # from `module^ import `item^` as `name?^ 



from module import item

from module_TYPED import item_TYPED as name_TYPED b

a from module import item b

a from module import item


    #  -------------fromfuture--------------- 
    # from __future__ import `name^           



from __future__ import name

from __future__ import name b

a from __future__ import name b

a from __future__ import name


    #  -------------genExp--------------- 
    # (`$SParg^`:_generator:^`$SParg^)    



( func for elem in seq )

( func_TYPED for elem_TYPED in seq_TYPED if condition_TYPED ) b

a ( func for elem in seq ) b

a ( func for elem in seq )


    #  -------------if--------------- 
    # `:_if:^                         
    # `else...{{^`:else:^`}}^         



if cond:
    pass
else:
    

    if cond_TYPED:
        pass_TYPED
    else_TYPED b

a if cond:
    pass
else:
     b

a if cond:
    pass
else:
    


    #  -------------ifmain---------------    
    # if __name__`$SPop^==`$SPop^"__main__": 
    #     `cursor^                           



if __name__ == "__main__":
    

    if __name__ == "__main__":
         b

a if __name__ == "__main__":
     b

a if __name__ == "__main__":
    


    #  -------------import--------------- 
    # import `mod^` as `name?^            



import mod

import mod_TYPED as name_TYPED b

a import mod b

a import mod


    #  -------------init---------------                        
    # def __init__`$SPfun^(`$SParg^self`,$SPop`arg*^`$SParg^): 
    #     `cursor^                                             



def __init__( self ):
    

    def __init__( self, arg_TYPED, arg_TYPED, arg_TYPED ):
         b

a def __init__( self ):
     b

a def __init__( self ):
    


    #  -------------lambda--------------- 
    # lambda `arg*^: `expr^               



lambda : expr

lambda arg_TYPED, arg_TYPED, arg_TYPED: expr b

a lambda : expr b

a lambda : expr


    #  -------------listComp--------------- 
    # [`$SParg^`:_generator:^`$SParg^]      



[ func for elem in seq ]

[ func_TYPED for elem_TYPED in seq_TYPED if condition_TYPED ] b

a [ func for elem in seq ] b

a [ func for elem in seq ]


    #  -------------p--------------- 
    # pass                           



pass

pass b

a pass b

a pass


    #  -------------python--------------- 
    # _CMT_!`$PYTHON_EXC^                 
    # _CMT_ coding: `encoding^            



#!/usr/bin/env python
# coding: utf-8


#!/usr/bin/env python
# coding: encoding_TYPED
 b

a #!/usr/bin/env python
# coding: utf-8
 b

a #!/usr/bin/env python
# coding: utf-8



    #  -------------range---------------       
    # range(`$SParg^``0?`,$SPop^`end^`$SParg^) 



range( end )

range( 0_TYPED, end_TYPED ) b

a range( end ) b

a range( end )


    #  -------------s--------------- 
    # self.                          



self.

self. b

a self. b

a self.


    #  -------------sb--------------- 
    # _CMT_!`$PYTHON_EXC^             
    # _CMT_ coding: `encoding^        



#!/usr/bin/env python
# coding: utf-8


#!/usr/bin/env python
# coding: encoding_TYPED
 b

a #!/usr/bin/env python
# coding: utf-8
 b

a #!/usr/bin/env python
# coding: utf-8



    #  -------------shebang--------------- 
    # _CMT_!`$PYTHON_EXC^                  
    # _CMT_ coding: `encoding^             



#!/usr/bin/env python
# coding: utf-8


#!/usr/bin/env python
# coding: encoding_TYPED
 b

a #!/usr/bin/env python
# coding: utf-8
 b

a #!/usr/bin/env python
# coding: utf-8



    #  -------------super---------------                                                   
    # super(`$SParg^`clz^python_find_class('Me')^,`$SPop^self`$SParg^).`method^(`:_args:^) 



super( ClassName_TYPED, self ).method()

super( clz_TYPED, self ).method_TYPED( arg_TYPED, arg_TYPED, arg_TYPED ) b

a super( ClassName_TYPED, self ).method() b

a super( ClassName_TYPED, self ).method()


    #  -------------try--------------- 
    # try:                             
    #     `job^                        
    # `:except:^                       
    # `finally...{{^`:finally:^`}}^    



try:
    job
except Exception, e:
    pass
finally:
    pass

try:
    job_TYPED
except Exception_TYPED, e_TYPED:
    pass_TYPED
finally_TYPED b

a try:
    job
except Exception, e:
    pass
finally:
    pass b

a try:
    job
except Exception, e:
    pass
finally:
    pass


    #  -------------try_--------------- 
    # try:                              
    #     `wrapped^                     
    # `:except:^                        
    # `finally...{{^`:finally:^`}}^     



try:
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
except Exception, e:
    pass
finally:
    pass

try:
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
except Exception_TYPED, e_TYPED:
    pass_TYPED
finally_TYPEDb

a try:
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
except Exception, e:
    pass
finally:
    passb

a try:
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
except Exception, e:
    pass
finally:
    pass


    #  -------------while--------------- 
    # while `condition^:                 
    #     `cursor^                       



while condition:
    

    while condition_TYPED:
         b

a while condition:
     b

a while condition:
    


    #  -------------with--------------- 
    # with `opener^ as `name^:          
    #     `cursor^                      



with opener as name:
    

    with opener_TYPED as name_TYPED:
         b

a with opener as name:
     b

a with opener as name:
    


    #  -------------{_--------------- 
    # {`wrapped^}                     



{WRAPPED_TEXT
WRAPPED_TEXT_line2}

{WRAPPED_TEXT
WRAPPED_TEXT_line2}b

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}b

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}

