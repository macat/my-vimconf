


    --   -------------"_--------------- 
    --  "`wrapped^"                     



"WRAPPED_TEXT
WRAPPED_TEXT_line2"

"WRAPPED_TEXT
WRAPPED_TEXT_line2"b

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"b

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"


    --   -------------#if--------------- 
    --  #if `0^                          
    --  `cursor^                         
    --  #endif                           



#if 0

#endif

    #if 0_TYPED
    
    #endif b

    a #if 0
    
    #endif b

    a #if 0
    
    #endif


    --   -------------#if_--------------- 
    --  #if `0^                           
    --  `wrapped^                         
    --  `cursor^                          
    --  #endif                            



#if 0
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endif

#if 0_TYPED
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endifb

a #if 0
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endifb

a #if 0
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endif


    --   -------------#ifdef--------------- 
    --  #ifdef `identifier^                 
    --  `cursor^                            
    --  #endif                              



#ifdef identifier

#endif

    #ifdef identifier_TYPED
    
    #endif b

    a #ifdef identifier
    
    #endif b

    a #ifdef identifier
    
    #endif


    --   -------------#ifdef_--------------- 
    --  #ifdef `identifier^                  
    --  `wrapped^                            
    --  `cursor^                             
    --  #endif                               



#ifdef identifier
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endif

#ifdef identifier_TYPED
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endifb

a #ifdef identifier
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endifb

a #ifdef identifier
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endif


    --   -------------#ifndef--------------- 
    --  #ifndef `symbol^                     
    --  #     define `symbol^                
    --                                       
    --  `cursor^                             
    --  #endif `$CL^ `symbol^ `$CR^          



#ifndef TEST
#     define TEST


#endif  TEST 

    #ifndef SYMBOL_TYPED
    #     define SYMBOL_TYPED
    
    
    #endif  SYMBOL_TYPED  b

    a #ifndef TEST
    #     define TEST
    
    
    #endif  TEST  b

    a #ifndef TEST
    #     define TEST
    
    
    #endif  TEST 


    --   -------------#ifndef_--------------- 
    --  #ifndef `identifier^                  
    --  `wrapped^                             
    --  `cursor^                              
    --  #endif                                



#ifndef identifier
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endif

#ifndef identifier_TYPED
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endifb

a #ifndef identifier
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endifb

a #ifndef identifier
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endif


    --   -------------#inc--------------- 
    --  #include <`^.h>                   



#include <.h>

    #include <_TYPED.h> b

    a #include <.h> b

    a #include <.h>


    --   -------------#include_user--------------- 
    --  #include "`me^.h"                          



#include "test.h"

    #include "me_TYPED.h" b

    a #include "test.h" b

    a #include "test.h"


    --   -------------#ind--------------- 
    --  #include "`me^.h"                 



#include "test.h"

    #include "me_TYPED.h" b

    a #include "test.h" b

    a #include "test.h"


    --   -------------'_--------------- 
    --  '`wrapped^'                     



'WRAPPED_TEXT
WRAPPED_TEXT_line2'

'WRAPPED_TEXT
WRAPPED_TEXT_line2'b

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'b

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'


    --   -------------(_--------------- 
    --  (`wrapped^)                     



(WRAPPED_TEXT
WRAPPED_TEXT_line2)

(WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)


    --   -------------<_--------------- 
    --  <`wrapped^>                     



<WRAPPED_TEXT
WRAPPED_TEXT_line2>

<WRAPPED_TEXT
WRAPPED_TEXT_line2>b

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>b

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>


    --   -------------[_--------------- 
    --  [`wrapped^]                     



[WRAPPED_TEXT
WRAPPED_TEXT_line2]

[WRAPPED_TEXT
WRAPPED_TEXT_line2]b

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]b

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]


    --   -------------`_--------------- 
    --  \``wrapped^\`                   



`WRAPPED_TEXT
WRAPPED_TEXT_line2`

`WRAPPED_TEXT
WRAPPED_TEXT_line2`b

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`b

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`


    --   -------------Author--------------- 
    --  `$author^                           



    drdr.xp

    drdr.xp b

    a drdr.xp b

    a drdr.xp


    --   -------------class---------------                              
    --  class `context...{{~(`ctxt~) => `}}~`className~ `types~a~ where 
    --      `ar~ :: `type~ `...~                                        
    --      `methodName~ :: `methodType~`...~                           
    --  `cursor~                                                        



    class (ctxt) => className a where
        ar :: type 
        methodName :: methodType
        methodName :: methodType
    

        class context_TYPEDclassName_TYPED types_TYPED where
            ar_TYPED :: type_TYPED _TYPED
         b

         a class (ctxt) => className a where
             ar :: type 
             methodName :: methodType
             methodName :: methodType
          b

          a class (ctxt) => className a where
              ar :: type 
              methodName :: methodType
              methodName :: methodType
          


    --   -------------classcom---------------                           
    --  _CMT_| `classDescr~                                             
    --  class `context...{{~(`ctxt~) => `}}~`className~ `types~a~ where 
    --      _CMT_| `methodDescr~                                        
    --      `ar~ :: `type~ `...~                                        
    --      _CMT_| `method_Descr~                                       
    --      `methodName~ :: `methodType~`...~                           
    --  `cursor~                                                        



    -- | classDescr
    class (ctxt) => className a where
        -- | methodDescr
        ar :: type 
        -- | method_Descr
        methodName :: methodType
        -- | method_Descr
        methodName :: methodType
    

        -- | classDescr_TYPED
        class context_TYPEDclassName_TYPED types_TYPED where
            -- | methodDescr_TYPED
            ar_TYPED :: type_TYPED _TYPED
         b

         a -- | classDescr
         class (ctxt) => className a where
             -- | methodDescr
             ar :: type 
             -- | method_Descr
             methodName :: methodType
             -- | method_Descr
             methodName :: methodType
          b

          a -- | classDescr
          class (ctxt) => className a where
              -- | methodDescr
              ar :: type 
              -- | method_Descr
              methodName :: methodType
              -- | method_Descr
              methodName :: methodType
          


    --   -------------cmt_--------------- 
    --  {-                                
    --  `wrapped~                         
    --  -}                                



{-
WRAPPED_TEXT
WRAPPED_TEXT_line2
-}

{-
WRAPPED_TEXT
WRAPPED_TEXT_line2
-}b

a {-
WRAPPED_TEXT
WRAPPED_TEXT_line2
-}b

a {-
WRAPPED_TEXT
WRAPPED_TEXT_line2
-}


    --   -------------datarecord---------------                      
    --  data `context...{{~(`ctxt~) => `}}~`typename~`typeParams~ ~= 
    --      `Constructor~ {                                          
    --          `field~ :: `type~`                                   
    --          `...{{~,                                             
    --          `fieldn~ :: `typen~`                                 
    --          `...~`}}~                                            
    --      }                                                        
    --      `deriving...{{~deriving (`Eq, Show~)`}}~                 
    --  `cursor~                                                     



    data (ctxt) => typename =
        Constructor {
            field :: type,
            fieldn :: typen,
            fieldn :: typen
        }
        deriving (Eq, Show)
    

    data context_TYPEDtypename_TYPEDtypeParams_TYPED=
        Constructor_TYPED {
            field_TYPED :: type_TYPED
            _TYPED
        }
        deriving_TYPED
     b

     a data (ctxt) => typename =
         Constructor {
             field :: type,
             fieldn :: typen,
             fieldn :: typen
         }
         deriving (Eq, Show)
      b

      a data (ctxt) => typename =
          Constructor {
              field :: type,
              fieldn :: typen,
              fieldn :: typen
          }
          deriving (Eq, Show)
      


    --   -------------datarecordcom---------------                   
    --  _CMT_| `typeDescr~                                           
    --  data `context...{{~(`ctxt~) => `}}~`typename~`typeParams~ ~= 
    --      `Constructor~ {                                          
    --          `field~ :: `type~ _CMT_^ `fieldDescr~`               
    --          `...{{~,                                             
    --          `fieldn~ :: `typen~ _CMT_^ `fielddescr~`             
    --          `...~`}}~                                            
    --      }                                                        
    --      `deriving...{{~deriving (`Eq,Show~)`}}~                  
    --  `cursor~                                                     



    -- | typeDescr
    data (ctxt) => typename =
        Constructor {
            field :: type -- ^ fieldDescr,
            fieldn :: typen -- ^ fielddescr,
            fieldn :: typen -- ^ fielddescr
        }
        deriving (Eq,Show)
    

    -- | typeDescr_TYPED
    data context_TYPEDtypename_TYPEDtypeParams_TYPED=
        Constructor_TYPED {
            field_TYPED :: type_TYPED -- ^ fieldDescr_TYPED
            _TYPED
        }
        deriving_TYPED
     b

     a -- | typeDescr
     data (ctxt) => typename =
         Constructor {
             field :: type -- ^ fieldDescr,
             fieldn :: typen -- ^ fielddescr,
             fieldn :: typen -- ^ fielddescr
         }
         deriving (Eq,Show)
      b

      a -- | typeDescr
      data (ctxt) => typename =
          Constructor {
              field :: type -- ^ fieldDescr,
              fieldn :: typen -- ^ fielddescr,
              fieldn :: typen -- ^ fielddescr
          }
          deriving (Eq,Show)
      


    --   -------------datasum---------------                         
    --  data `context...{{~(`ctxt~) => `}}~`typename~`typeParams~ ~= 
    --      `Constructor~ `ctorParams~VOID()~`                       
    --    `...~                                                      
    --      | `Ctor~ `params~VOID()~                                 
    --      `...~                                                    
    --      `deriving...{{~deriving (`Eq,Show~)`}}~                  
    --  `cursor~                                                     



    data (ctxt) => typename =
        Constructor 
        | Ctor 
        
        | Ctor 
        
        deriving (Eq,Show)
    

    data context_TYPEDtypename_TYPEDtypeParams_TYPED=
        Constructor_TYPED ctorParams_TYPED
      _TYPED
        deriving_TYPED
     b

     a data (ctxt) => typename =
         Constructor 
         | Ctor 
         
         | Ctor 
         
         deriving (Eq,Show)
      b

      a data (ctxt) => typename =
          Constructor 
          | Ctor 
          
          | Ctor 
          
          deriving (Eq,Show)
      


    --   -------------datasumcom---------------                        
    --  _CMT_| `typeDescr~VOID()~                                      
    --  data `context...{{~(`ctxt~) => `}}~`typename~` `typeParams~ ~= 
    --      _CMT_| `ConstructorDescr~                                  
    --      `Constructor~ `ctorParams~VOID()~`                         
    --      `...~                                                      
    --      _CMT_| `Ctor descr~VOID()~                                 
    --      | `Ctor~ `params~VOID()~`                                  
    --      `...~                                                      
    --      `deriving...{{~deriving (`Eq,Show~)`}}~                    
    --  `cursor~                                                       



    -- | 
    data (ctxt) => typename  =
        -- | ConstructorDescr
        Constructor 
        -- | 
        | Ctor 
        -- | 
        | Ctor 
        deriving (Eq,Show)
    

    -- | typeDescr_TYPED
    data context_TYPEDtypename_TYPED typeParams_TYPED=
        -- | ConstructorDescr_TYPED
        Constructor_TYPED ctorParams_TYPED
        _TYPED
        deriving_TYPED
     b

     a -- | 
     data (ctxt) => typename  =
         -- | ConstructorDescr
         Constructor 
         -- | 
         | Ctor 
         -- | 
         | Ctor 
         deriving (Eq,Show)
      b

      a -- | 
      data (ctxt) => typename  =
          -- | ConstructorDescr
          Constructor 
          -- | 
          | Ctor 
          -- | 
          | Ctor 
          deriving (Eq,Show)
      


    --   -------------deriving---------------        
    --  deriving (`classname~`...~,`classname~`...~) 



    deriving (classname,classname,classname,classname)

    deriving (classname_TYPED_TYPED) b

    a deriving (classname,classname,classname,classname) b

    a deriving (classname,classname,classname,classname)


    --   -------------derivingstand---------------                   
    --  deriving instance `context...{{~`ctxt~ => `}}~`class~ `type~ 



    deriving instance ctxt => class type

    deriving instance context_TYPEDclass_TYPED type b

    a deriving instance ctxt => class type b

    a deriving instance ctxt => class type


    --   -------------Email--------------- 
    --  `$email^                           



    drdr.xp@gmail.com

    drdr.xp@gmail.com b

    a drdr.xp@gmail.com b

    a drdr.xp@gmail.com


    --   -------------File--------------- 
    --  `file()^                          



    test.page

    test.page b

    a test.page b

    a test.page


    --   -------------fun---------------       
    --  `funName~ `pattern~ = `def~`           
    --  `...{{~                                
    --  `name~R("funName")~ `pattern~ = `def~` 
    --  `...~`}}~                              



    funName pattern = def
    funName pattern = def
    funName pattern = def
    funName pattern = def

    funName_TYPED pattern_TYPED = def_TYPED
    _TYPED b

    a funName pattern = def
    funName pattern = def
    funName pattern = def
    funName pattern = def b

    a funName pattern = def
    funName pattern = def
    funName pattern = def
    funName pattern = def


    --   -------------funcom---------------    
    --  _CMT_| `function_description~          
    --  `funName~ :: `type~                    
    --  `name~R("funName")~ `pattern~ = `def~` 
    --  `...{{~                                
    --  `name~R("funName")~ `pattern~ = `def~` 
    --  `...~`}}~                              



    -- | function_description
    funName :: type
    funName pattern = def
    funName pattern = def
    funName pattern = def
    funName pattern = def

    -- | function_description_TYPED
    funName_TYPED :: type_TYPED
    name_TYPED pattern_TYPED = def_TYPED
    _TYPED b

    a -- | function_description
    funName :: type
    funName pattern = def
    funName pattern = def
    funName pattern = def
    funName pattern = def b

    a -- | function_description
    funName :: type
    funName pattern = def
    funName pattern = def
    funName pattern = def
    funName pattern = def


    --   -------------funtype--------------- 
    --  `funName~ :: `context...{{~(`ctxt~)  
    --          =>`}}~ `type~ _CMT_^ `is~`   
    --          `...{{~                      
    --          -> `type~ _CMT_^ `is~`       
    --          `...~`}}~                    



    funName :: (ctxt)
            => type -- ^ is
            -> type -- ^ is
            -> type -- ^ is

            funName_TYPED :: context_TYPED type_TYPED -- ^ is_TYPED
                    _TYPED b

                    a funName :: (ctxt)
                            => type -- ^ is
                            -> type -- ^ is
                            -> type -- ^ is b

                            a funName :: (ctxt)
                                    => type -- ^ is
                                    -> type -- ^ is
                                    -> type -- ^ is


    --   -------------head---------------                  
    --  -------------------------------------------------- 
    --  --_CMT_           `headName~                       
    --  -------------------------------------------------- 



    --------------------------------------------------
    ----            headName
    --------------------------------------------------
    --
    --------------------------------------------------
    ----            headName_TYPED
    -------------------------------------------------- b
    --
    a --------------------------------------------------
    ----            headName
    -------------------------------------------------- b
    --
    a --------------------------------------------------
    ----            headName
    --------------------------------------------------
    --

    --   -------------if--------------- 
    --  if `expr~                       
    --      then `thenCode~             
    --      else `cursor~               



    if expr
        then thenCode
        else 

        if expr_TYPED
            then thenCode_TYPED
            else  b

            a if expr
                then thenCode
                else  b

                a if expr
                    then thenCode
                    else 


    --   -------------inline---------------            
    --  {-# INLINE `phase...{{~[`2~] `}}~`funName~ #-} 



    {-# INLINE [2] funName #-}

    {-# INLINE phase_TYPEDfunName_TYPED #-} b

    a {-# INLINE [2] funName #-} b

    a {-# INLINE [2] funName #-}


    --   -------------instance---------------      
    --  instance `className~ `instanceTypes~ where 
    --      `methodName~ `~ = `decl~ `...~         
    --      `method~ `~ = `declaration~`...~       
    --  `cursor~                                   



    instance className instanceTypes where
        methodName  = decl 
        method  = declaration
        method  = declaration
        method  = declaration
    

        instance className_TYPED instanceTypes_TYPED where
            methodName_TYPED _TYPED = decl_TYPED _TYPED
         b

         a instance className instanceTypes where
             methodName  = decl 
             method  = declaration
             method  = declaration
             method  = declaration
          b

          a instance className instanceTypes where
              methodName  = decl 
              method  = declaration
              method  = declaration
              method  = declaration
          


    --   -------------lang--------------- 
    --  {-# LANGUAGE `langName~ #-}       



    {-# LANGUAGE langName #-}

    {-# LANGUAGE langName_TYPED #-} b

    a {-# LANGUAGE langName #-} b

    a {-# LANGUAGE langName #-}


    --   -------------module---------------          
    --  module `moduleName~ `exports...{{~( `cursor~ 
    --      ) `}}~where                              



    module .Media.Ext2.Bash.xp.Vim.xp.Plugins.extern.Xptemplate.svn.Trunk.Src.Ftplugin.Haskell..test.Test ( 
        ) where

    module moduleName_TYPED exports_TYPEDwhere b

    a module .Media.Ext2.Bash.xp.Vim.xp.Plugins.extern.Xptemplate.svn.Trunk.Src.Ftplugin.Haskell..test.Test ( 
        ) where b

    a module .Media.Ext2.Bash.xp.Vim.xp.Plugins.extern.Xptemplate.svn.Trunk.Src.Ftplugin.Haskell..test.Test ( 
        ) where


    --   -------------noninline--------------- 
    --  {-# NOINLINE `funName~ #-}             



    {-# NOINLINE funName #-}

    {-# NOINLINE funName_TYPED #-} b

    a {-# NOINLINE funName #-} b

    a {-# NOINLINE funName #-}


    --   -------------once--------------- 
    --  #ifndef `symbol^                  
    --  #     define `symbol^             
    --                                    
    --  `cursor^                          
    --  #endif `$CL^ `symbol^ `$CR^       



    #ifndef __TEST_PAGE__
    #     define __TEST_PAGE__
    
    
    #endif  __TEST_PAGE__ 

    #ifndef symbol_TYPED
    #     define symbol_TYPED
    
    
    #endif  symbol_TYPED  b

    a #ifndef __TEST_PAGE__
    #     define __TEST_PAGE__
    
    
    #endif  __TEST_PAGE__  b

    a #ifndef __TEST_PAGE__
    #     define __TEST_PAGE__
    
    
    #endif  __TEST_PAGE__ 


    --   -------------options--------------- 
    --  {-# OPTIONS_GHC `options~ #-}        



    {-# OPTIONS_GHC options #-}

    {-# OPTIONS_GHC options_TYPED #-} b

    a {-# OPTIONS_GHC options #-} b

    a {-# OPTIONS_GHC options #-}


    --   -------------p_--------------- 
    --  (`wrapped~)                     



(WRAPPED_TEXT
WRAPPED_TEXT_line2)

(WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)


    --   -------------parser--------------- 
    --  `funName~ = `rule~`                 
    --          `another_rule...{{~         
    --          <|> `rule~`                 
    --          `more...{{~                 
    --          <|> `rule~`                 
    --          `more...~`}}~`}}~           
    --          `err...{{~<?> "`descr~"`}}~ 
    --  `cursor~                            



    funName = rule
            <|> rule
            <|> rule
            <|> rule
            <?> "descr"
    

            funName_TYPED = rule_TYPED
                    another_rule_TYPED
                    err_TYPED
             b

             a funName = rule
                     <|> rule
                     <|> rule
                     <|> rule
                     <?> "descr"
              b

              a funName = rule
                      <|> rule
                      <|> rule
                      <|> rule
                      <?> "descr"
              


    --   -------------str_--------------- 
    --  "`wrapped~"                       



"WRAPPED_TEXT
WRAPPED_TEXT_line2"

"WRAPPED_TEXT
WRAPPED_TEXT_line2"b

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"b

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"


    --   -------------type---------------                            
    --  `context...{{~(`ctxt~) => `}}~`t1~ -> `t2~`...~ -> `t3~`...~ 



    (ctxt) => t1 -> t2 -> t3 -> t3

    context_TYPEDt1_TYPED -> t2_TYPED_TYPED b

    a (ctxt) => t1 -> t2 -> t3 -> t3 b

    a (ctxt) => t1 -> t2 -> t3 -> t3


    --   -------------{_--------------- 
    --  {`wrapped^}                     



{WRAPPED_TEXT
    WRAPPED_TEXT_line2}

    {WRAPPED_TEXT
    WRAPPED_TEXT_line2}b

    a {WRAPPED_TEXT
    WRAPPED_TEXT_line2}b

    a {WRAPPED_TEXT
    WRAPPED_TEXT_line2}

