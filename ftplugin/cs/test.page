


    /*  -------------"_--------------- */
    /* "`wrapped^"                     */



"WRAPPED_TEXT
WRAPPED_TEXT_line2"

"WRAPPED_TEXT
WRAPPED_TEXT_line2"b

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"b

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"


    /*  -------------#if--------------- */
    /* #if `0^                          */
    /* `cursor^                         */
    /* #endif                           */



#if 0

#endif

#if 0_TYPED

#endif b

a #if 0

#endif b

a #if 0

#endif


    /*  -------------#if_--------------- */
    /* #if `0^                           */
    /* `wrapped^                         */
    /* `cursor^                          */
    /* #endif                            */



#if 0
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endif

#if 0_TYPED
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endifb

a #if 0
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endifb

a #if 0
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endif


    /*  -------------#ifdef--------------- */
    /* #ifdef `identifier^                 */
    /* `cursor^                            */
    /* #endif                              */



#ifdef identifier

#endif

#ifdef identifier_TYPED

#endif b

a #ifdef identifier

#endif b

a #ifdef identifier

#endif


    /*  -------------#ifdef_--------------- */
    /* #ifdef `identifier^                  */
    /* `wrapped^                            */
    /* `cursor^                             */
    /* #endif                               */



#ifdef identifier
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endif

#ifdef identifier_TYPED
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endifb

a #ifdef identifier
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endifb

a #ifdef identifier
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endif


    /*  -------------#ifndef--------------- */
    /* #ifndef `symbol^                     */
    /* #     define `symbol^                */
    /*                                      */
    /* `cursor^                             */
    /* #endif `$CL^ `symbol^ `$CR^          */



#ifndef TEST
#     define TEST


#endif /* TEST */

#ifndef SYMBOL_TYPED
#     define SYMBOL_TYPED


#endif /* SYMBOL_TYPED */ b

a #ifndef TEST
#     define TEST


#endif /* TEST */ b

a #ifndef TEST
#     define TEST


#endif /* TEST */


    /*  -------------#ifndef_--------------- */
    /* #ifndef `identifier^                  */
    /* `wrapped^                             */
    /* `cursor^                              */
    /* #endif                                */



#ifndef identifier
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endif

#ifndef identifier_TYPED
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endifb

a #ifndef identifier
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endifb

a #ifndef identifier
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endif


    /*  -------------#inc--------------- */
    /* #include <`^.h>                   */



#include <.h>

#include <_TYPED.h> b

a #include <.h> b

a #include <.h>


    /*  -------------#include_user--------------- */
    /* #include "`me^.h"                          */



#include "test.h"

#include "me_TYPED.h" b

a #include "test.h" b

a #include "test.h"


    /*  -------------#ind--------------- */
    /* #include "`me^.h"                 */



#include "test.h"

#include "me_TYPED.h" b

a #include "test.h" b

a #include "test.h"


    /*  -------------'_--------------- */
    /* '`wrapped^'                     */



'WRAPPED_TEXT
WRAPPED_TEXT_line2'

'WRAPPED_TEXT
WRAPPED_TEXT_line2'b

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'b

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'


    /*  -------------(_--------------- */
    /* (`wrapped^)                     */



(WRAPPED_TEXT
WRAPPED_TEXT_line2)

(WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)


    /*  -------------<_--------------- */
    /* <`wrapped^>                     */



<WRAPPED_TEXT
WRAPPED_TEXT_line2>

<WRAPPED_TEXT
WRAPPED_TEXT_line2>b

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>b

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>


    /*  -------------[_--------------- */
    /* [`wrapped^]                     */



[WRAPPED_TEXT
WRAPPED_TEXT_line2]

[WRAPPED_TEXT
WRAPPED_TEXT_line2]b

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]b

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]


    /*  -------------`_--------------- */
    /* \``wrapped^\`                   */



`WRAPPED_TEXT
WRAPPED_TEXT_line2`

`WRAPPED_TEXT
WRAPPED_TEXT_line2`b

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`b

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`


    /*  -------------assert--------------- */
    /* assert(`isTrue^, "`text^")          */



assert(isTrue, "text")

assert(isTrue_TYPED, "text_TYPED") b

a assert(isTrue, "text") b

a assert(isTrue, "text")


    /*  -------------Author--------------- */
    /* `$author^                           */



drdr.xp

drdr.xp b

a drdr.xp b

a drdr.xp


    /*  -------------bitfield--------------- */
    /* struct `structName^`$BRstc^{          */
    /*     `type^ `field^ : `bits^;`         */
    /*     `...^                             */
    /*     `type^ `field^ : `bits^;`         */
    /*     `...^                             */
    /* }` `var^^;                            */



struct structName
{
    type field : bits;
    type field : bits;
    type field : bits;
    type field : bits;
} ;

struct structName_TYPED
{
    type_TYPED field_TYPED : bits_TYPED;
    _TYPED
} var_TYPED; b

a struct structName
{
    type field : bits;
    type field : bits;
    type field : bits;
    type field : bits;
} ; b

a struct structName
{
    type field : bits;
    type field : bits;
    type field : bits;
    type field : bits;
} ;


    /*  -------------call_--------------- */
    /* `name^(`wrapped^`, `p*^)`cursor^   */



name(WRAPPED_TEXT
WRAPPED_TEXT_line2)

name_TYPED(WRAPPED_TEXT
WRAPPED_TEXT_line2, p_TYPED, p_TYPED, p_TYPED)b

a name(WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a name(WRAPPED_TEXT
WRAPPED_TEXT_line2)


    /*  -------------case--------------- */
    /* case `constant^`$SPcmd^:          */
    /*     `job^                         */
    /*     break;                        */



case constant :
    /* void */;
    break;

    case constant_TYPED :
        job_TYPED
        break; b

        a case constant :
            /* void */;
            break; b

            a case constant :
                /* void */;
                break;


    /*  -------------class---------------      */
    /* class `className^                       */
    /* {                                       */
    /*     public `className^(` `ctorParam` ^) */
    /*     {                                   */
    /*         `cursor^                        */
    /*     }                                   */
    /* }                                       */



                class className
                {
                    public className( ctorParam )
                    {
                        
                    }
                }

class className_TYPED
{
    public className_TYPED( ctorParam_TYPED )
    {
        
    }
} b

a class className
{
    public className( ctorParam )
    {
        
    }
} b

a class className
{
    public className( ctorParam )
    {
        
    }
}


    /*  -------------comment--------------- */
    /* `$CL^ `what^ `$CR^                   */



/* what */

/* what_TYPED */ b

a /* what */ b

a /* what */


    /*  -------------comment_--------------- */
    /* `$CL^ `wrapped^ `$CR^                 */



/* WRAPPED_TEXT
WRAPPED_TEXT_line2 */

/* WRAPPED_TEXT
WRAPPED_TEXT_line2 */b

a /* WRAPPED_TEXT
WRAPPED_TEXT_line2 */b

a /* WRAPPED_TEXT
WRAPPED_TEXT_line2 */


    /*  -------------commentBlock--------------- */
    /* `$CL^                                     */
    /*  `$CM^ `cursor^                           */
    /*  `$CR^                                    */



/*
 * 
 */

/*
 * 
 */ b

a /*
 * 
 */ b

a /*
 * 
 */


    /*  -------------commentBlock_--------------- */
    /* `$CL^                                      */
    /*  `$CM^ `wrapped^                           */
    /*  `$CR^                                     */



/*
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */

/*
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */b

a /*
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */b

a /*
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */


    /*  -------------commentDoc--------------- */
    /* `$CL^`$CM^                              */
    /*  `$CM^ `cursor^                         */
    /*  `$CR^                                  */



/**
 * 
 */

/**
 * 
 */ b

a /**
 * 
 */ b

a /**
 * 
 */


    /*  -------------commentDoc_--------------- */
    /* `$CL^`$CM^                               */
    /*  `$CM^ `wrapped^                         */
    /*  `$CR^                                   */



/**
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */

/**
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */b

a /**
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */b

a /**
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */


    /*  -------------commentLine--------------- */
    /* `$CL^ `what^ `$CR^                       */



/* what */

/* what_TYPED */ b

a /* what */ b

a /* what */


    /*  -------------commentLine_--------------- */
    /* `$CL^ `wrapped^ `$CR^                     */



/* WRAPPED_TEXT
WRAPPED_TEXT_line2 */

/* WRAPPED_TEXT
WRAPPED_TEXT_line2 */b

a /* WRAPPED_TEXT
WRAPPED_TEXT_line2 */b

a /* WRAPPED_TEXT
WRAPPED_TEXT_line2 */


    /*  -------------default--------------- */
    /* default:                             */
    /*     `cursor^                         */



default:
    

default:
     b

     a default:
          b

          a default:
              


    /*  -------------do--------------- */
    /* do`$BRloop^{                    */
    /*     `cursor^                    */
    /* }`$BRloop^while (`condition^);  */



          do
          {
              
          }
          while (condition);

          do
          {
              
          }
          while (condition_TYPED); b

          a do
          {
              
          }
          while (condition); b

          a do
          {
              
          }
          while (condition);


    /*  -------------elif--------------- */
    /* else `Include:_if^                */



          else if ( condition )
          {
              /* void */;
          }

else if ( condition_TYPED )
{
    job_TYPED
} b

a else if ( condition )
{
    /* void */;
} b

a else if ( condition )
{
    /* void */;
}


    /*  -------------else--------------- */
    /* else`$BRif^{                      */
    /*     `cursor^                      */
    /* }                                 */



else
{
    
}

else
{
    
} b

a else
{
    
} b

a else
{
    
}


    /*  -------------else_--------------- */
    /* else`$BRif^{                       */
    /*     `wrapped^                      */
    /* }                                  */



else
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}

else
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}b

a else
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}b

a else
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}


    /*  -------------Email--------------- */
    /* `$email^                           */



drdr.xp@gmail.com

drdr.xp@gmail.com b

a drdr.xp@gmail.com b

a drdr.xp@gmail.com


    /*  -------------enum--------------- */
    /* enum `name^`$BRstc^{              */
    /*     `elt^;`                       */
    /*     `...{^                        */
    /*     `elt^;`                       */
    /*     `...^`}^                      */
    /* }` `var^;                         */



enum name
{
    elt;
    elt;
    elt;
    elt;
} var;

enum name_TYPED
{
    elt_TYPED;
    _TYPED
} var_TYPED; b

a enum name
{
    elt;
    elt;
    elt;
    elt;
} var; b

a enum name
{
    elt;
    elt;
    elt;
    elt;
} var;


    /*  -------------fcomment--------------- */
    /* _CMT_*                                */
    /*  * @author : `$author^ | `$email^     */
    /*  * @description                       */
    /*  *     `cursor^                       */
    /*  * @return {`int^} `desc^             */
    /*  _cmt_                                */



/**
 * @author : drdr.xp | drdr.xp@gmail.com
 * @description
 *     
 * @return {int} desc
 */

/**
 * @author : drdr.xp | drdr.xp@gmail.com
 * @description
 *     
 * @return {int_TYPED} desc_TYPED
 */ b

a /**
 * @author : drdr.xp | drdr.xp@gmail.com
 * @description
 *     
 * @return {int} desc
 */ b

a /**
 * @author : drdr.xp | drdr.xp@gmail.com
 * @description
 *     
 * @return {int} desc
 */


    /*  -------------File--------------- */
    /* `file()^                          */



test.page

test.page b

a test.page b

a test.page


    /*  -------------filehead---------------                                  */
    /* _CMT_*-------------------------/// `sum^ \\\--------------------------- */
    /*  *                                                                     */
    /*  * <b>`function^</b>                                                   */
    /*  * @version : `1.0^                                                    */
    /*  * @since : `strftime("%Y %b %d")^                                     */
    /*  *                                                                     */
    /*  * @description :                                                      */
    /*  *     `cursor^                                                        */
    /*  * @usage :                                                            */
    /*  *                                                                     */
    /*  * @author : `$author^ | `$email^                                      */
    /*  * @copyright `.com.cn^                                                */
    /*  * @TODO :                                                             */
    /*  *                                                                     */
    /*  *--------------------------\\\ `sum^ ///---------------------------_cmt_ */



/**-------------------------/// sum \\\---------------------------
 *
 * <b>function</b>
 * @version : 1.0
 * @since : 2009 Oct 08
 *
 * @description :
 *     
 * @usage :
 *
 * @author : drdr.xp | drdr.xp@gmail.com
 * @copyright .com.cn
 * @TODO :
 *
 *--------------------------\\\ sum ///---------------------------*/


/**-------------------------/// sum_TYPED \\\---------------------------
 *
 * <b>function_TYPED</b>
 * @version : 10_TYPED
 * @since : 2009 Oct 08
 *
 * @description :
 *     
 * @usage :
 *
 * @author : drdr.xp | drdr.xp@gmail.com
 * @copyright comcn_TYPED
 * @TODO :
 *
 *--------------------------\\\ sum_TYPED ///---------------------------*/
 b

 a /**-------------------------/// sum \\\---------------------------
  *
  * <b>function</b>
  * @version : 1.0
  * @since : 2009 Oct 08
  *
  * @description :
  *     
  * @usage :
  *
  * @author : drdr.xp | drdr.xp@gmail.com
  * @copyright .com.cn
  * @TODO :
  *
  *--------------------------\\\ sum ///---------------------------*/
  b

  a /**-------------------------/// sum \\\---------------------------
   *
   * <b>function</b>
   * @version : 1.0
   * @since : 2009 Oct 08
   *
   * @description :
   *     
   * @usage :
   *
   * @author : drdr.xp | drdr.xp@gmail.com
   * @copyright .com.cn
   * @TODO :
   *
   *--------------------------\\\ sum ///---------------------------*/
  


    /*  -------------for---------------                   */
    /* for (`int^ `i^ = `0^; `i^ < `len^; ++`i^) `$BRif^{ */
    /*     `cursor^                                       */
    /* }                                                  */



  for (int i = 0; i < len; ++i) 
  {
      
  }

for (int_TYPED i_TYPED = 0_TYPED; i_TYPED < len_TYPED; ++i_TYPED) 
{
    
} b

a for (int i = 0; i < len; ++i) 
{
    
} b

a for (int i = 0; i < len; ++i) 
{
    
}


    /*  -------------foreach---------------      */
    /* foreach ( `var^ `e^ in `what^ )`$BRloop^{ */
    /*     `cursor^                              */
    /* }                                         */



foreach ( var e in what )
{
    
}

foreach ( var_TYPED e_TYPED in what_TYPED )
{
    
} b

a foreach ( var e in what )
{
    
} b

a foreach ( var e in what )
{
    
}


    /*  -------------forever--------------- */
    /* for (;;) `body^                      */



for (;;) /* void */

for (;;) /* void */ b

a for (;;) /* void */ b

a for (;;) /* void */


    /*  -------------fornn---------------                                                                    */
    /* for ( `$FOR_SCOPE^`$VAR_PRE^`ptr^ = `init^; `$NULL^ != `$VAR_PRE^`ptr^; `$VAR_PRE^`ptrOp^ )`$BRloop^{ */
    /*     `cursor^                                                                                          */
    /* }                                                                                                     */



for ( ptr = init; null != ptr; ptr )
{
    
}

for ( ptr_TYPED = init_TYPED; null != ptr_TYPED; ptrOp_TYPED )
{
    
} b

a for ( ptr = init; null != ptr; ptr )
{
    
} b

a for ( ptr = init; null != ptr; ptr )
{
    
}


    /*  -------------forr---------------                     */
    /* for (`int^ `i^ = `n^; `i^ >`=^ `end^; --`i^) `$BRif^{ */
    /*     `cursor^                                          */
    /* }                                                     */



for (int i = n; i >= end; --i) 
{
    
}

for (int_TYPED i_TYPED = n_TYPED; i_TYPED >_TYPED end_TYPED; --i_TYPED) 
{
    
} b

a for (int i = n; i >= end; --i) 
{
    
} b

a for (int i = n; i >= end; --i) 
{
    
}


    /*  -------------fprintf---------------   */
    /* fprintf( `stream^, "`pattern^"`elts^ ) */



fprintf( stream, "pattern" )

fprintf( stream_TYPED, "pattern_TYPED" ) b

a fprintf( stream, "pattern" ) b

a fprintf( stream, "pattern" )


    /*  -------------fun---------------                                        */
    /* `c_fun_type_indent()^`int^`c_fun_body_indent()^`name^(`param^)`$BRfun^{ */
    /*     `cursor^                                                            */
    /* }                                                                       */



    int
name()
{
    
}

    int_TYPED
name_TYPED(param_TYPED)
{
    
} b

a     int
name()
{
    
} b

a     int
name()
{
    
}


    /*  -------------fun_---------------                                       */
    /* `c_fun_type_indent()^`int^`c_fun_body_indent()^`name^(`param^)`$BRfun^{ */
    /*     `wrapped^                                                           */
    /*     `cursor^                                                            */
    /* }                                                                       */



    int
name()
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
    
}

    int_TYPED
name_TYPED(param_TYPED)
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
    
}b

a     int
name()
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
    
}b

a     int
name()
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
    
}


    /*  -------------if---------------                     */
    /* `Include:_if^` `else...{{^`$BRel^`Include:else^`}}^ */



if ( condition )
{
    /* void */;
}
else
{
    
}

if ( condition_TYPED )
{
    job_TYPED
} else_TYPED b

a if ( condition )
{
    /* void */;
}
else
{
    
} b

a if ( condition )
{
    /* void */;
}
else
{
    
}


    /*  -------------if0---------------                    */
    /* `Include:_if^` `else...{{^`$BRel^`Include:else^`}}^ */



if ( 0 == var )
{
    /* void */;
}
else
{
    
}

if ( 0 == var_TYPED )
{
    job_TYPED
} else_TYPED b

a if ( 0 == var )
{
    /* void */;
}
else
{
    
} b

a if ( 0 == var )
{
    /* void */;
}
else
{
    
}


    /*  -------------if_---------------                */
    /* if`$SPcmd^(`$SParg^`condition^`$SParg^)`$BRif^{ */
    /*     `wrapped^                                   */
    /* }                                               */



if ( condition )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}

if ( condition_TYPED )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}b

a if ( condition )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}b

a if ( condition )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}


    /*  -------------ifee---------------                                    */
    /* `Include:_if^` `else_if...{{^`$BRel^`Include:elif^` `else_if...^`}}^ */



if ( condition )
{
    /* void */;
}
else if ( condition )
{
    /* void */;
}
else if ( condition )
{
    /* void */;
}
else if ( condition )
{
    /* void */;
}

if ( condition_TYPED )
{
    job_TYPED
} else_if_TYPED b

a if ( condition )
{
    /* void */;
}
else if ( condition )
{
    /* void */;
}
else if ( condition )
{
    /* void */;
}
else if ( condition )
{
    /* void */;
} b

a if ( condition )
{
    /* void */;
}
else if ( condition )
{
    /* void */;
}
else if ( condition )
{
    /* void */;
}
else if ( condition )
{
    /* void */;
}


    /*  -------------ifn---------------                    */
    /* `Include:_if^` `else...{{^`$BRel^`Include:else^`}}^ */



if ( null == var )
{
    /* void */;
}
else
{
    
}

if ( null == var_TYPED )
{
    job_TYPED
} else_TYPED b

a if ( null == var )
{
    /* void */;
}
else
{
    
} b

a if ( null == var )
{
    /* void */;
}
else
{
    
}


    /*  -------------ifn0---------------                   */
    /* `Include:_if^` `else...{{^`$BRel^`Include:else^`}}^ */



if ( 0 != var )
{
    /* void */;
}
else
{
    
}

if ( 0 != var_TYPED )
{
    job_TYPED
} else_TYPED b

a if ( 0 != var )
{
    /* void */;
}
else
{
    
} b

a if ( 0 != var )
{
    /* void */;
}
else
{
    
}


    /*  -------------ifnn---------------                   */
    /* `Include:_if^` `else...{{^`$BRel^`Include:else^`}}^ */



if ( null != var )
{
    /* void */;
}
else
{
    
}

if ( null != var_TYPED )
{
    job_TYPED
} else_TYPED b

a if ( null != var )
{
    /* void */;
}
else
{
    
} b

a if ( null != var )
{
    /* void */;
}
else
{
    
}


    /*  -------------main---------------        */
    /* public static void Main( string[] args ) */
    /* {                                        */
    /*     `cursor^                             */
    /* }                                        */



public static void Main( string[] args )
{
    
}

public static void Main( string[] args )
{
    
} b

a public static void Main( string[] args )
{
    
} b

a public static void Main( string[] args )
{
    
}


    /*  -------------namespace--------------- */
    /* namespace `name^                       */
    /* {                                      */
    /*     `cursor^                           */
    /* }                                      */



namespace name
{
    
}

namespace name_TYPED
{
    
} b

a namespace name
{
    
} b

a namespace name
{
    
}


    /*  -------------once--------------- */
    /* #ifndef `symbol^                  */
    /* #     define `symbol^             */
    /*                                   */
    /* `cursor^                          */
    /* #endif `$CL^ `symbol^ `$CR^       */



#ifndef __TEST_PAGE__
#     define __TEST_PAGE__


#endif /* __TEST_PAGE__ */

#ifndef symbol_TYPED
#     define symbol_TYPED


#endif /* symbol_TYPED */ b

a #ifndef __TEST_PAGE__
#     define __TEST_PAGE__


#endif /* __TEST_PAGE__ */ b

a #ifndef __TEST_PAGE__
#     define __TEST_PAGE__


#endif /* __TEST_PAGE__ */


    /*  -------------printf--------------- */
    /* printf( "`pattern^"`elts^ )         */



printf( "pattern" )

printf( "pattern_TYPED" ) b

a printf( "pattern" ) b

a printf( "pattern" )


    /*  -------------prop--------------- */
    /* public `type^ `Name^              */
    /* {`                                */
    /*     `get...{{^                    */
    /*     get { return `what^; }`}}^`   */
    /*     `set...{{^                    */
    /*     set { `what^ = `value^; }`}}^ */
    /* }                                 */



public type Name
{
    get { return what; }
    set { what = value; }
}

public type_TYPED Name_TYPED
{
    get_TYPED
    set_TYPED
} b

a public type Name
{
    get { return what; }
    set { what = value; }
} b

a public type Name
{
    get { return what; }
    set { what = value; }
}


    /*  -------------region_--------------- */
    /* #region `regionText^                 */
    /* `wrapped^                            */
    /* `cursor^                             */
    /* #endregion _CMT_ `regionText^ _cmt_  */



#region regionText
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endregion /* regionText */

#region regionText_TYPED
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endregion /* regionText_TYPED */b

a #region regionText
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endregion /* regionText */b

a #region regionText
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endregion /* regionText */


    /*  -------------snprintf---------------        */
    /* snprintf( `str^, `size^, "`pattern^"`elts^ ) */



snprintf( str, size, "pattern" )

snprintf( str_TYPED, size_TYPED, "pattern_TYPED" ) b

a snprintf( str, size, "pattern" ) b

a snprintf( str, size, "pattern" )


    /*  -------------sprintf--------------- */
    /* sprintf( `str^, "`pattern^"`elts^ )  */



sprintf( str, "pattern" )

sprintf( str_TYPED, "pattern_TYPED" ) b

a sprintf( str, "pattern" ) b

a sprintf( str, "pattern" )


    /*  -------------struct---------------          */
    /* `public^ struct `structName^                 */
    /* {                                            */
    /*     `fieldAccess^public^ `type^ `name^;`...^ */
    /*     `fieldAccess^public^ `type^ `name^;`...^ */
    /* }                                            */



public struct structName
{
    public type name;
    public type name;
    public type name;
    public type name;
}

public_TYPED struct structName_TYPED
{
    fieldAccess_TYPED type_TYPED name_TYPED;_TYPED
} b

a public struct structName
{
    public type name;
    public type name;
    public type name;
    public type name;
} b

a public struct structName
{
    public type name;
    public type name;
    public type name;
    public type name;
}


    /*  -------------switch---------------    */
    /* switch (`$SParg^`var^`$SParg^)`$BRif^{ */
    /*     `:case:^                           */
    /* `                                      */
    /*     `case...`                          */
    /*     {{^                                */
    /*     `:case:^                           */
    /* `                                      */
    /*     `case...`                          */
    /* ^`}}^`                                 */
    /*     `default...`{{^                    */
    /*     `:default:^`}}^                    */
    /* }                                      */



switch ( var )
{
    case constant :
        /* void */;
        break;

    case constant :
        /* void */;
        break;

    case constant :
        /* void */;
        break;

    case constant :
        /* void */;
        break;

    default:
        
}

switch ( var_TYPED )
{
    case constant_TYPED :
        job_TYPED
        break;

    case_TYPED
    
    default_TYPED
} b

a switch ( var )
{
    case constant :
        /* void */;
        break;

    case constant :
        /* void */;
        break;

    case constant :
        /* void */;
        break;

    case constant :
        /* void */;
        break;

    default:
        
} b

a switch ( var )
{
    case constant :
        /* void */;
        break;

    case constant :
        /* void */;
        break;

    case constant :
        /* void */;
        break;

    case constant :
        /* void */;
        break;

    default:
        
}


    /*  -------------try--------------- */
    /* try                              */
    /* {                                */
    /*     `what^                       */
    /* }`                               */
    /* `...^                            */
    /* catch (`except^ e)               */
    /* {                                */
    /*     `handler^                    */
    /* }`                               */
    /* `...^`                           */
    /* `finally...{{^                   */
    /* finally                          */
    /* {                                */
    /*     `cursor^                     */
    /* }`}}^                            */



try
{
    what
}
catch (except e)
{
    /* handler */
}
catch (except e)
{
    /* handler */
}
catch (except e)
{
    /* handler */
}
finally
{
    
}

try
{
    what_TYPED
}
_TYPED
finally_TYPED b

a try
{
    what
}
catch (except e)
{
    /* handler */
}
catch (except e)
{
    /* handler */
}
catch (except e)
{
    /* handler */
}
finally
{
    
} b

a try
{
    what
}
catch (except e)
{
    /* handler */
}
catch (except e)
{
    /* handler */
}
catch (except e)
{
    /* handler */
}
finally
{
    
}


    /*  -------------try_--------------- */
    /* try                               */
    /* {                                 */
    /*     `wrapped^                     */
    /* }`                                */
    /* `...^                             */
    /* catch (`except^ e)                */
    /* {                                 */
    /*     `handler^                     */
    /* }`                                */
    /* `...^`                            */
    /* `finally...{{^                    */
    /* finally                           */
    /* {                                 */
    /*     `cursor^                      */
    /* }`}}^                             */



try
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
catch (except e)
{
    /* handler */
}
catch (except e)
{
    /* handler */
}
catch (except e)
{
    /* handler */
}
finally
{
    
}

try
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
_TYPED
finally_TYPEDb

a try
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
catch (except e)
{
    /* handler */
}
catch (except e)
{
    /* handler */
}
catch (except e)
{
    /* handler */
}
finally
{
    
}b

a try
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
catch (except e)
{
    /* handler */
}
catch (except e)
{
    /* handler */
}
catch (except e)
{
    /* handler */
}
finally
{
    
}


    /*  -------------while--------------- */
    /* while (`condition^)`$BRloop^{      */
    /*     `cursor^                       */
    /* }                                  */



while (condition)
{
    
}

while (condition_TYPED)
{
    
} b

a while (condition)
{
    
} b

a while (condition)
{
    
}


    /*  -------------while0--------------- */
    /* do`$BRloop^{                        */
    /*     `cursor^                        */
    /* }`$BRloop^while (`condition^);      */



do
{
    
}
while (false);

do
{
    
}
while (false); b

a do
{
    
}
while (false); b

a do
{
    
}
while (false);


    /*  -------------while1--------------- */
    /* while (`condition^)`$BRloop^{       */
    /*     `cursor^                        */
    /* }                                   */



while (true)
{
    
}

while (true)
{
    
} b

a while (true)
{
    
} b

a while (true)
{
    
}


    /*  -------------whilenn--------------- */
    /* while (`condition^)`$BRloop^{        */
    /*     `cursor^                         */
    /* }                                    */



while (null != var)
{
    
}

while (null != var_TYPED)
{
    
} b

a while (null != var)
{
    
} b

a while (null != var)
{
    
}


    /*  -------------{_--------------- */
    /* {`wrapped^}                     */



{WRAPPED_TEXT
WRAPPED_TEXT_line2}

{WRAPPED_TEXT
WRAPPED_TEXT_line2}b

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}b

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}

