


    #   -------------"_--------------- 
    #  "`wrapped^"                     



"WRAPPED_TEXT
WRAPPED_TEXT_line2"

"WRAPPED_TEXT
WRAPPED_TEXT_line2"b

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"b

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"


    #   -------------'_--------------- 
    #  '`wrapped^'                     



'WRAPPED_TEXT
WRAPPED_TEXT_line2'

'WRAPPED_TEXT
WRAPPED_TEXT_line2'b

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'b

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'


    #   -------------(_--------------- 
    #  (`wrapped^)                     



(WRAPPED_TEXT
WRAPPED_TEXT_line2)

(WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)


    #   -------------<_--------------- 
    #  <`wrapped^>                     



<WRAPPED_TEXT
WRAPPED_TEXT_line2>

<WRAPPED_TEXT
WRAPPED_TEXT_line2>b

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>b

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>


    #   -------------[_--------------- 
    #  [`wrapped^]                     



[WRAPPED_TEXT
WRAPPED_TEXT_line2]

[WRAPPED_TEXT
WRAPPED_TEXT_line2]b

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]b

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]


    #   -------------`_--------------- 
    #  \``wrapped^\`                   



`WRAPPED_TEXT
WRAPPED_TEXT_line2`

`WRAPPED_TEXT
WRAPPED_TEXT_line2`b

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`b

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`


    #   -------------addprefix--------------- 
    #  $(addprefix `prefix^, `elemList^)      



$(addprefix prefix, elemList)

$(addprefix prefix_TYPED, elemList_TYPED) b

a $(addprefix prefix, elemList) b

a $(addprefix prefix, elemList)


    #   -------------addsuffix--------------- 
    #  $(addsuffix `suffix^, `elemList^)      



$(addsuffix suffix, elemList)

$(addsuffix suffix_TYPED, elemList_TYPED) b

a $(addsuffix suffix, elemList) b

a $(addsuffix suffix, elemList)


    #   -------------Author--------------- 
    #  `$author^                           



drdr.xp

drdr.xp b

a drdr.xp b

a drdr.xp


    #   -------------basevar---------------      
    #  `lang^C^C := `compiler^gcc^               
    #  `lang^C^FLAGS := `switches^-Wall -Wextra^ 



CC := gcc
CFLAGS := -Wall -Wextra

lang_TYPEDC := compiler_TYPED
CFLAGS := -Wall -Wextra b

a CC := gcc
CFLAGS := -Wall -Wextra b

a CC := gcc
CFLAGS := -Wall -Wextra


    #   -------------comment--------------- 
    #  `$CS^ `cursor^                       



# 
#
#  b
#
a #  b

a # 


    #   -------------comment_--------------- 
    #  `$CS^ `wrapped^                       



# WRAPPED_TEXT
WRAPPED_TEXT_line2

# WRAPPED_TEXT
WRAPPED_TEXT_line2b

a # WRAPPED_TEXT
WRAPPED_TEXT_line2b

a # WRAPPED_TEXT
WRAPPED_TEXT_line2


    #   -------------commentBlock--------------- 
    #  `$CS^ `cursor^                            
    #  `$CS^                                     



# 
#
#
# 
# b
#
a # 
# b
#
a # 
#
#

    #   -------------commentDoc--------------- 
    #  `$CS^                                   
    #  `$CS^ `cursor^                          
    #  `$CS^                                   



#
# 
#
#
#
# 
# b
#
a #
# 
# b
#
a #
# 
#
#

    #   -------------commentLine--------------- 
    #  `$CS^ `cursor^                           



# 
#
#  b
#
a #  b

a # 


    #   -------------commentLine_--------------- 
    #  `$CS^ `wrapped^                           



# WRAPPED_TEXT
WRAPPED_TEXT_line2

# WRAPPED_TEXT
WRAPPED_TEXT_line2b

a # WRAPPED_TEXT
WRAPPED_TEXT_line2b

a # WRAPPED_TEXT
WRAPPED_TEXT_line2


    #   -------------Email--------------- 
    #  `$email^                           



drdr.xp@gmail.com

drdr.xp@gmail.com b

a drdr.xp@gmail.com b

a drdr.xp@gmail.com


    #   -------------File--------------- 
    #  `file()^                          



test.page

test.page b

a test.page b

a test.page


    #   -------------filterout--------------- 
    #  $(filter-out `toRemove^, `elemList^)   



$(filter-out toRemove, elemList)

$(filter-out toRemove_TYPED, elemList_TYPED) b

a $(filter-out toRemove, elemList) b

a $(filter-out toRemove, elemList)


    #   -------------ifeq--------------- 
    #  ifeq (`what^, `with^)             
    #      `job^                         
    #  ``else...`                        
    #  {{^else                           
    #      `cursor^                      
    #  `}}^endif                         



ifeq (what, with)
    # job
else
    
endif

ifeq (what_TYPED, with_TYPED)
    job_TYPED
else_TYPED
endif b

a ifeq (what, with)
    # job
else
    
endif b

a ifeq (what, with)
    # job
else
    
endif


    #   -------------ifneq--------------- 
    #  ifneq (`what^, `with^)             
    #      `job^                          
    #  ``else...`                         
    #  {{^else                            
    #      `cursor^                       
    #  `}}^endif                          



ifneq (what, with)
    job
else
    
endif

ifneq (what_TYPED, with_TYPED)
    job_TYPED
else_TYPED
endif b

a ifneq (what, with)
    job
else
    
endif b

a ifneq (what, with)
    job
else
    
endif


    #   -------------patsubst---------------                       
    #  $(patsubst `sourcePattern^%.c^,  `destPattern^%.o^, `list^) 



$(patsubst %.c,  %.o, list)

$(patsubst sourcePattern_TYPED,  destPattern_TYPED, list_TYPED) b

a $(patsubst %.c,  %.o, list) b

a $(patsubst %.c,  %.o, list)


    #   -------------shell--------------- 
    #  $(shell `command^)                 



$(shell command)

$(shell command_TYPED) b

a $(shell command) b

a $(shell command)


    #   -------------subst---------------              
    #  $(subst `sourceString^, `destString^, `string^) 



$(subst sourceString, destString, string)

$(subst sourceString_TYPED, destString_TYPED, string_TYPED) b

a $(subst sourceString, destString, string) b

a $(subst sourceString, destString, string)


    #   -------------var_--------------- 
    #  $(`wrapped^)                      



$(WRAPPED_TEXT
WRAPPED_TEXT_line2)

$(WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a $(WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a $(WRAPPED_TEXT
WRAPPED_TEXT_line2)


    #   -------------wildcard--------------- 
    #  $(wildcard `globpattern^)             



$(wildcard globpattern)

$(wildcard globpattern_TYPED) b

a $(wildcard globpattern) b

a $(wildcard globpattern)


    #   -------------{_--------------- 
    #  {`wrapped^}                     



{WRAPPED_TEXT
WRAPPED_TEXT_line2}

{WRAPPED_TEXT
WRAPPED_TEXT_line2}b

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}b

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}

